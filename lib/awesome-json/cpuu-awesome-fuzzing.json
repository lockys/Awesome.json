[
  {
    "name": "The Fuzzing Book (2019)",
    "url": "https://www.fuzzingbook.org/"
  },
  {
    "name": "The Art, Science, and Engineering of Fuzzing: A Survey (2019)",
    "url": "https://ieeexplore.ieee.org/document/8863940",
    "description": "Actually, this document is a paper, but it contains more important and essential content than any other book."
  },
  {
    "name": "Fuzzing for Software Security Testing and Quality Assurance, 2nd Edition (2018)",
    "url": "https://www.amazon.com/Fuzzing-Software-Security-Testing-Assurance/dp/1608078507/"
  },
  {
    "name": "Fuzzing: Brute Force Vulnerability Discovery, 1st Edition (2007)",
    "url": "https://www.amazon.com/Fuzzing-Brute-Force-Vulnerability-Discovery/dp/0321446119/"
  },
  {
    "name": "Open Source Fuzzing Tools, 1st Edition (2007)",
    "url": "https://www.amazon.com/Open-Source-Fuzzing-Tools-Rathaus/dp/1597491950/"
  },
  {
    "name": "Effective File Format Fuzzing, Black Hat Europe 2016",
    "url": "https://youtu.be/qTTwqFRD1H8"
  },
  {
    "name": "Adventures in Fuzzing, NYU Talk 2018",
    "url": "https://www.youtube.com/watch?v=SngK4W4tVc0"
  },
  {
    "name": "Fuzzing with AFL, NDC Conferences 2018",
    "url": "https://www.youtube.com/watch?v=DFQT1YxvpDo"
  },
  {
    "name": "HFL: Hybrid Fuzzing on the Linux Kernel, 2020",
    "url": "https://www.unexploitable.systems/publication/kimhfl/"
  },
  {
    "name": "HotFuzz: Discovering Algorithmic Denial-of-Service Vulnerabilities Through Guided Micro-Fuzzing, 2020",
    "url": "https://www.researchgate.net/publication/339164746_HotFuzz_Discovering_Algorithmic_Denial-of-Service_Vulnerabilities_Through_Guided_Micro-Fuzzing"
  },
  {
    "name": "HYPER-CUBE: High-Dimensional Hypervisor Fuzzing, 2020",
    "url": "https://www.syssec.ruhr-uni-bochum.de/media/emma/veroeffentlichungen/2020/02/07/Hyper-Cube-NDSS20.pdf"
  },
  {
    "name": "Not All Coverage Measurements Are Equal: Fuzzing by Coverage Accounting for Input Prioritization, 2020",
    "url": "https://www.ndss-symposium.org/wp-content/uploads/2020/02/24422.pdf"
  },
  {
    "name": "CodeAlchemist: Semantics-Aware Code Generation to Find Vulnerabilities in JavaScript Engines, 2019",
    "url": "https://daramg.gift/paper/han-ndss2019.pdf"
  },
  {
    "name": "PeriScope: An Effective Probing and Fuzzing Framework for the Hardware-OS Boundary, 2019",
    "url": "https://people.cs.kuleuven.be/~stijn.volckaert/papers/2019_NDSS_PeriScope.pdf"
  },
  {
    "name": "REDQUEEN: Fuzzing with Input-to-State Correspondence, 2019",
    "url": "https://www.syssec.ruhr-uni-bochum.de/media/emma/veroeffentlichungen/2018/12/17/NDSS19-Redqueen.pdf"
  },
  {
    "name": "Send Hardest Problems My Way: Probabilistic Path Prioritization for Hybrid Fuzzing, 2019",
    "url": "https://www.cs.ucr.edu/~heng/pubs/digfuzz_ndss19.pdf"
  },
  {
    "name": "Life after Speech Recognition: Fuzzing Semantic Misinterpretation for Voice Assistant Applications, 2019",
    "url": "https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_08-4_Zhang_paper.pdf"
  },
  {
    "name": "INSTRIM: Lightweight Instrumentation for Coverage-guided Fuzzing, 2018",
    "url": "https://www.ndss-symposium.org/wp-content/uploads/2018/07/bar2018_14_Hsu_paper.pdf"
  },
  {
    "name": "IoTFuzzer: Discovering Memory Corruptions in IoT Through App-based Fuzzing, 2018",
    "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/02/ndss2018_01A-1_Chen_paper.pdf"
  },
  {
    "name": "What You Corrupt Is Not What You Crash: Challenges in Fuzzing Embedded Devices, 2018",
    "url": "http://s3.eurecom.fr/docs/ndss18_muench.pdf"
  },
  {
    "name": "Enhancing Memory Error Detection for Large-Scale Applications and Fuzz Testing, 2018",
    "url": "https://lifeasageek.github.io/papers/han:meds.pdf"
  },
  {
    "name": "Vuzzer: Application-aware evolutionary fuzzing, 2017",
    "url": "https://www.ndss-symposium.org/ndss2017/ndss-2017-programme/vuzzer-application-aware-evolutionary-fuzzing/"
  },
  {
    "name": "DELTA: A Security Assessment Framework for Software-Defined Networks, 2017",
    "url": "https://www.ndss-symposium.org/wp-content/uploads/2017/09/ndss201702A-1LeePaper.pdf"
  },
  {
    "name": "Driller: Augmenting Fuzzing Through Selective Symbolic Execution, 2016",
    "url": "https://cancer.shtech.org/wiki/uploads/2016---NDSS---driller-augmenting-fuzzing-through-selective-symbolic-execution.pdf"
  },
  {
    "name": "Automated Whitebox Fuzz Testing, 2008",
    "url": "https://www.ndss-symposium.org/wp-content/uploads/2017/09/Automated-Whitebox-Fuzz-Testing-paper-Patrice-Godefroid.pdf"
  },
  {
    "name": "Fuzzing JavaScript Engines with Aspect-preserving Mutation, 2020",
    "url": "https://jakkdu.github.io/pubs/2020/park:die.pdf"
  },
  {
    "name": "IJON: Exploring Deep State Spaces via Fuzzing, 2020",
    "url": "https://www.syssec.ruhr-uni-bochum.de/media/emma/veroeffentlichungen/2020/02/27/IJON-Oakland20.pdf"
  },
  {
    "name": "Krace: Data Race Fuzzing for Kernel File Systems, 2020",
    "url": "https://www.cc.gatech.edu/~mxu80/pubs/xu:krace.pdf"
  },
  {
    "name": "Pangolin:Incremental Hybrid Fuzzing with Polyhedral Path Abstraction, 2020",
    "url": "https://qingkaishi.github.io/public_pdfs/SP2020.pdf"
  },
  {
    "name": "RetroWrite: Statically Instrumenting COTS Binaries for Fuzzing and Sanitization, 2020",
    "url": "https://www.semanticscholar.org/paper/RetroWrite%3A-Statically-Instrumenting-COTS-Binaries-Dinesh-Burow/845cafb153b0e4b9943c6d9b6a7e42c14845a0d6"
  },
  {
    "name": "Full-speed Fuzzing: Reducing Fuzzing Overhead through Coverage-guided Tracing, 2019",
    "url": "https://www.computer.org/csdl/proceedings-article/sp/2019/666000b122/19skgbGVFEQ"
  },
  {
    "name": "Fuzzing File Systems via Two-Dimensional Input Space Exploration, 2019",
    "url": "https://www.computer.org/csdl/proceedings-article/sp/2019/666000a594/19skfLYOpaw"
  },
  {
    "name": "NEUZZ: Efficient Fuzzing with Neural Program Smoothing, 2019",
    "url": "https://www.computer.org/csdl/proceedings-article/sp/2019/666000a900/19skg5XghG0"
  },
  {
    "name": "Razzer: Finding Kernel Race Bugs through Fuzzing, 2019",
    "url": "https://www.computer.org/csdl/proceedings-article/sp/2019/666000a296/19skfwZLirm"
  },
  {
    "name": "Angora: Efficient Fuzzing by Principled Search, 2018",
    "url": "http://web.cs.ucdavis.edu/~hchen/paper/chen2018angora.pdf"
  },
  {
    "name": "CollAFL: Path Sensitive Fuzzing, 2018",
    "url": "http://chao.100871.net/papers/oakland18.pdf"
  },
  {
    "name": "T-Fuzz: fuzzing by program transformation, 2018",
    "url": "https://nebelwelt.net/publications/files/18Oakland.pdf"
  },
  {
    "name": "Skyfire: Data-Driven Seed Generation for Fuzzing, 2017",
    "url": "https://www.ieee-security.org/TC/SP2017/papers/42.pdf"
  },
  {
    "name": "Program-Adaptive Mutational Fuzzing, 2015",
    "url": "https://softsec.kaist.ac.kr/~sangkilc/papers/cha-oakland15.pdf"
  },
  {
    "name": "TaintScope: A checksum-aware directed fuzzing tool for automatic software vulnerability detection, 2010",
    "url": "https://ieeexplore.ieee.org/abstract/document/5504701"
  },
  {
    "name": "FANS: Fuzzing Android Native System Services via Automated Interface Analysis, 2020",
    "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/liu"
  },
  {
    "name": "Analysis of DTLS Implementations Using Protocol State Fuzzing, 2020",
    "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/fiterau-brostean"
  },
  {
    "name": "EcoFuzz: Adaptive Energy-Saving Greybox Fuzzing as a Variant of the Adversarial Multi-Armed Bandit, 2020",
    "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/yue"
  },
  {
    "name": "Fuzzing Error Handling Code using Context-Sensitive Software Fault Injection, 2020",
    "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/jiang"
  },
  {
    "name": "FuzzGen: Automatic Fuzzer Generation, 2020",
    "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/ispoglou"
  },
  {
    "name": "ParmeSan: Sanitizer-guided Greybox Fuzzing, 2020",
    "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/osterlund"
  },
  {
    "name": "SpecFuzz: Bringing Spectre-type vulnerabilities to the surface, 2020",
    "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/oleksenko"
  },
  {
    "name": "FuzzGuard: Filtering out Unreachable Inputs in Directed Grey-box Fuzzing through Deep Learning, 2020",
    "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/zong"
  },
  {
    "name": "Montage: A Neural Network Language Model-Guided JavaScript Engine Fuzzer, 2020",
    "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/lee-suyoung"
  },
  {
    "name": "GREYONE: Data Flow Sensitive Fuzzing, 2020",
    "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/gan"
  },
  {
    "name": "Fuzzification: Anti-Fuzzing Techniques, 2019",
    "url": "https://www.usenix.org/conference/usenixsecurity19/presentation/jung"
  },
  {
    "name": "AntiFuzz: Impeding Fuzzing Audits of Binary Executables, 2019",
    "url": "https://www.usenix.org/conference/usenixsecurity19/presentation/guler"
  },
  {
    "name": "Charm: Facilitating Dynamic Analysis of Device Drivers of Mobile Systems, 2018",
    "url": "https://www.usenix.org/conference/usenixsecurity18/presentation/talebi"
  },
  {
    "name": "MoonShine: Optimizing OS Fuzzer Seed Selection with Trace Distillation, 2018",
    "url": "https://www.usenix.org/conference/usenixsecurity18/presentation/pailoor"
  },
  {
    "name": "QSYM : A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing, 2018",
    "url": "https://www.usenix.org/conference/usenixsecurity18/presentation/yun"
  },
  {
    "name": "OSS-Fuzz",
    "url": "https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/serebryany",
    "description": "Google's continuous fuzzing service for open source software, 2017"
  },
  {
    "name": "kAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels, 2017",
    "url": "https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/schumilo"
  },
  {
    "name": "Protocol State Fuzzing of TLS Implementations, 2015",
    "url": "https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/de-ruiter"
  },
  {
    "name": "Optimizing Seed Selection for Fuzzing, 2014",
    "url": "https://softsec.kaist.ac.kr/~sangkilc/papers/rebert-usenixsec14.pdf"
  },
  {
    "name": "Dowsing for overflows: a guided fuzzer to find buffer boundary violations, 2013",
    "url": "http://enigma.usenix.org/sites/default/files/sec13_proceedings_interior.pdf#page=57"
  },
  {
    "name": "Fuzzing with Code Fragments, 2012",
    "url": "https://www.usenix.org/system/files/conference/usenixsecurity12/sec12-final73.pdf"
  },
  {
    "name": "Intriguer: Field-Level Constraint Solving for Hybrid Fuzzing, 2019",
    "url": "https://dl.acm.org/citation.cfm?id=3354249"
  },
  {
    "name": "Learning to Fuzz from Symbolic Execution with Application to Smart Contracts, 2019",
    "url": "https://files.sri.inf.ethz.ch/website/papers/ccs19-ilf.pdf"
  },
  {
    "name": "Matryoshka: fuzzing deeply nested branches, 2019",
    "url": "https://web.cs.ucdavis.edu/~hchen/paper/chen2019matryoshka.pdf"
  },
  {
    "name": "Evaluating Fuzz Testing, 2018",
    "url": "http://www.cs.umd.edu/~mwh/papers/fuzzeval.pdf"
  },
  {
    "name": "Hawkeye: Towards a Desired Directed Grey-box Fuzzer, 2018",
    "url": "https://chenbihuan.github.io/paper/ccs18-chen-hawkeye.pdf"
  },
  {
    "name": "IMF: Inferred Model-based Fuzzer, 2017",
    "url": "http://daramg.gift/paper/han-ccs2017.pdf"
  },
  {
    "name": "SemFuzz: Semantics-based Automatic Generation of Proof-of-Concept Exploits, 2017",
    "url": "https://www.informatics.indiana.edu/xw7/papers/p2139-you.pdf"
  },
  {
    "name": "AFL-based Fuzzing for Java with Kelinci, 2017",
    "url": "https://dl.acm.org/citation.cfm?id=3138820"
  },
  {
    "name": "Designing New Operating Primitives to Improve Fuzzing Performance, 2017",
    "url": "http://iisp.gatech.edu/sites/default/files/images/designing_new_operating_primitives_to_improve_fuzzing_performance_vt.pdf"
  },
  {
    "name": "Directed Greybox Fuzzing, 2017",
    "url": "https://dl.acm.org/citation.cfm?id=3134020"
  },
  {
    "name": "SlowFuzz: Automated Domain-Independent Detection of Algorithmic Complexity Vulnerabilities, 2017",
    "url": "https://arxiv.org/pdf/1708.08437.pdf"
  },
  {
    "name": "DIFUZE: Interface Aware Fuzzing for Kernel Drivers, 2017",
    "url": "https://acmccs.github.io/papers/p2123-corinaA.pdf"
  },
  {
    "name": "Systematic Fuzzing and Testing of TLS Libraries, 2016",
    "url": "https://www.nds.rub.de/media/nds/veroeffentlichungen/2016/10/19/tls-attacker-ccs16.pdf"
  },
  {
    "name": "Coverage-based Greybox Fuzzing as Markov Chain, 2016",
    "url": "https://ieeexplore.ieee.org/abstract/document/8233151"
  },
  {
    "name": "eFuzz: A Fuzzer for DLMS/COSEM Electricity Meters, 2016",
    "url": "http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.817.5616&rep=rep1&type=pdf"
  },
  {
    "name": "Scheduling Black-box Mutational Fuzzing, 2013",
    "url": "https://softsec.kaist.ac.kr/~sangkilc/papers/woo-ccs13.pdf"
  },
  {
    "name": "Taming compiler fuzzers, 2013",
    "url": "https://www.cs.utah.edu/~regehr/papers/pldi13.pdf"
  },
  {
    "name": "SAGE: whitebox fuzzing for security testing, 2012",
    "url": "https://dl.acm.org/citation.cfm?id=2094081"
  },
  {
    "name": "Grammar-based whitebox fuzzing, 2008",
    "url": "https://dl.acm.org/citation.cfm?id=1375607"
  },
  {
    "name": "Taint-based directed whitebox fuzzing, 2009",
    "url": "https://dl.acm.org/citation.cfm?id=1555061"
  },
  {
    "name": "MEUZZ: Smart Seed Scheduling for Hybrid Fuzzing, 2020",
    "url": "https://arxiv.org/abs/2002.08568"
  },
  {
    "name": "A Review of Machine Learning Applications in Fuzzing, 2019",
    "url": "https://arxiv.org/abs/1906.11133"
  },
  {
    "name": "Evolutionary Fuzzing of Android OS Vendor System Services, 2019",
    "url": "https://arxiv.org/abs/1906.00621"
  },
  {
    "name": "MoonLight: Effective Fuzzing with Near-Optimal Corpus Distillation, 2019",
    "url": "https://arxiv.org/abs/1905.13055"
  },
  {
    "name": "Coverage-Guided Fuzzing for Deep Neural Networks, 2018",
    "url": "https://arxiv.org/abs/1809.01266"
  },
  {
    "name": "DLFuzz: Differential Fuzzing Testing of Deep Learning Systems, 2018",
    "url": "https://arxiv.org/abs/1808.09413"
  },
  {
    "name": "TensorFuzz: Debugging Neural Networks with Coverage-Guided Fuzzing, 2018",
    "url": "https://arxiv.org/abs/1807.10875"
  },
  {
    "name": "NEUZZ: Efficient Fuzzing with Neural Program Learning, 2018",
    "url": "https://arxiv.org/abs/1807.05620"
  },
  {
    "name": "EnFuzz: From Ensemble Learning to Ensemble Fuzzing, 2018",
    "url": "https://arxiv.org/abs/1807.00182"
  },
  {
    "name": "REST-ler: Automatic Intelligent REST API Fuzzing, 2018",
    "url": "https://arxiv.org/abs/1806.09739"
  },
  {
    "name": "Deep Reinforcement Fuzzing, 2018",
    "url": "https://arxiv.org/abs/1801.04589"
  },
  {
    "name": "Not all bytes are equal: Neural byte sieve for fuzzing, 2017",
    "url": "https://arxiv.org/abs/1711.04596"
  },
  {
    "name": "Faster Fuzzing: Reinitialization with Deep Neural Models, 2017",
    "url": "https://arxiv.org/abs/1711.02807"
  },
  {
    "name": "Learn&Fuzz: Machine Learning for Input Fuzzing, 2017",
    "url": "https://arxiv.org/abs/1701.07232"
  },
  {
    "name": "Complementing Model Learning with Mutation-Based Fuzzing, 2016",
    "url": "https://arxiv.org/abs/1611.02429"
  },
  {
    "name": "Ifuzzer: An evolutionary interpreter fuzzer using genetic programming, 2016",
    "url": "https://www.cs.vu.nl/~herbertb/download/papers/ifuzzer-esorics16.pdf"
  },
  {
    "name": "Hybrid fuzz testing: Discovering software bugs via fuzzing and symbolic execution, 2012",
    "url": "https://pdfs.semanticscholar.org/488a/b1e313f5109153f2c74e3b5d86d41e9b4b71.pdf"
  },
  {
    "name": "Call-Flow Aware API Fuzz Testing for Security of Windows Systems, 2008",
    "url": "https://www.computer.org/csdl/proceedings/iccsa/2008/3243/00/3243a019-abs.html"
  },
  {
    "name": "Feedback-directed random test generation, 2007",
    "url": "https://dl.acm.org/citation.cfm?id=1248841"
  },
  {
    "name": "radamsa",
    "url": "https://gitlab.com/akihe/radamsa",
    "description": "A general-purpose fuzzer."
  },
  {
    "name": "zzuf",
    "url": "https://github.com/samhocevar/zzuf",
    "description": "A transparent application input fuzzer."
  },
  {
    "name": "American fuzzy lop",
    "url": "http://lcamtuf.coredump.cx/afl/",
    "description": "A security-oriented fuzzer that employs a novel type of compile-time instrumentation and genetic algorithms to automatically discover clean, interesting test cases that trigger new internal states in the targeted binary."
  },
  {
    "name": "WinAFL",
    "url": "https://github.com/googleprojectzero/winafl",
    "description": "A fork of AFL for fuzzing Windows binaries."
  },
  {
    "name": "libFuzzer",
    "url": "http://llvm.org/docs/LibFuzzer.html",
    "description": "A library for coverage-guided fuzz testing. Tutorial from Google."
  },
  {
    "name": "Driller",
    "url": "https://github.com/shellphish/driller",
    "description": "An implementation of the driller paper. This implementation was built on top of AFL with angr being used as a symbolic tracer."
  },
  {
    "name": "shellphish fuzzer",
    "url": "https://github.com/shellphish/fuzzer",
    "description": "A Python interface to AFL, allowing for easy injection of testcases and other functionality."
  },
  {
    "name": "Eclipser",
    "url": "https://github.com/SoftSec-KAIST/Eclipser",
    "description": "A binary-based fuzz testing tool that improves upon classic coverage-based fuzzing by leveraging a novel technique called grey-box concolic testing."
  },
  {
    "name": "Jazzer",
    "url": "https://github.com/CodeIntelligenceTesting/jazzer",
    "description": "A coverage-guided, in-process fuzzer for the Java Virtual Machine. It is based on libFuzzer and can be applied directly to compiled applications."
  },
  {
    "name": "jsfunfuzz",
    "url": "https://github.com/MozillaSecurity/funfuzz",
    "description": "JavaScript engine fuzzers."
  },
  {
    "name": "IFuzzer",
    "url": "https://github.com/vspandan/IFuzzer",
    "description": "An Evolutionary Interpreter Fuzzer Using Genetic Programming."
  },
  {
    "name": "domato",
    "url": "https://github.com/googleprojectzero/domato",
    "description": "DOM fuzzer from Google Project Zero. Blog Post."
  },
  {
    "name": "fuzzilli",
    "url": "https://github.com/googleprojectzero/fuzzilli",
    "description": "A (coverage-)guided Javascript engine fuzzer, written by Samuel Groß."
  },
  {
    "name": "CodeAlchemist",
    "url": "https://github.com/SoftSec-KAIST/CodeAlchemist",
    "description": "JavaScript engine fuzzer, written by KAIST SoftSec Lab."
  },
  {
    "name": "test-each",
    "url": "https://github.com/ehmicky/test-each",
    "description": "Repeat tests using different inputs."
  },
  {
    "name": "gremlins.js",
    "url": "https://github.com/marmelab/gremlins.js",
    "description": "gremlins.js is a monkey testing library written in JavaScript."
  },
  {
    "name": "dtls-fuzzer",
    "url": "https://github.com/assist-project/dtls-fuzzer",
    "description": "A Java tool which performs protocol state fuzzing of DTLS servers."
  },
  {
    "name": "T-Fuzz",
    "url": "https://github.com/HexHive/T-Fuzz",
    "description": "T-Fuzz leverages a coverage guided fuzzer to generate inputs."
  },
  {
    "name": "TLS-Attacker",
    "url": "https://github.com/RUB-NDS/TLS-Attacker",
    "description": "A Java-based framework for analyzing TLS libraries."
  },
  {
    "name": "DELTA",
    "url": "https://github.com/seungsoo-lee/DELTA",
    "description": "SDN Security evaluation framework."
  },
  {
    "name": "boofuzz",
    "url": "https://github.com/jtpereyda/boofuzz",
    "description": "Network Protocol Fuzzing for Humans. Documentation is available at http://boofuzz.readthedocs.io/, including nifty quickstart guides."
  },
  {
    "name": "LL-Fuzzer",
    "url": "https://github.com/mit-ll/LL-Fuzzer",
    "description": "An automated NFC fuzzing framework for Android devices."
  },
  {
    "name": "tlsfuzzer",
    "url": "https://github.com/tomato42/tlsfuzzer",
    "description": "A SSL and TLS protocol test suite and fuzzer."
  },
  {
    "name": "TumbleRF",
    "url": "https://github.com/riverloopsec/tumblerf",
    "description": "A framework that orchestrates the application of fuzzing techniques to RF systems."
  },
  {
    "name": "PULSAR",
    "url": "https://github.com/hgascon/pulsar",
    "description": "A method for stateful black-box fuzzing of proprietary network protocols."
  },
  {
    "name": "SPIKE",
    "url": "https://github.com/guilhermeferreira/spikepp/tree/master/SPIKE",
    "description": "A fuzzer development framework like sulley, a predecessor of sulley."
  },
  {
    "name": "PROTOS",
    "url": "https://www.ee.oulu.fi/roles/ouspg/Protos",
    "description": "Security testing of protocol implementations."
  },
  {
    "name": "Charm",
    "url": "https://github.com/trusslab/charm",
    "description": "A system solution that facilitates dynamic analysis of device drivers of mobile systems."
  },
  {
    "name": "certfuzz",
    "url": "https://github.com/CERTCC/certfuzz",
    "description": "It contains the source code for the CMU CERT Basic Fuzzing Framework (BFF) and the CERT Failure Observation Engine (FOE)."
  },
  {
    "name": "Peach Fuzzer Platform",
    "url": "https://www.peach.tech/products/peach-fuzzer/",
    "description": "An automated security testing platform that prevents zero day attacks by finding vulnerabilities in hardware and software systems."
  },
  {
    "name": "Blackhat USA 2018 AFL workshop training materials",
    "url": "https://github.com/wrauner/afl-fuzzing-training",
    "description": "From @wrauner at Samsung Research."
  },
  {
    "name": "CI Fuzz",
    "url": "https://code-intelligence.com",
    "description": "A CI/CD-agnostic platform for feedback-based fuzz testing of both native applications and Java web apps."
  }
]
