[
  {
    "name": "aiohttp",
    "url": "https://github.com/KeepSafe/aiohttp",
    "description": "Http client/server for asyncio (PEP-3156)."
  },
  {
    "name": "sanic",
    "url": "https://github.com/channelcat/sanic",
    "description": "Python 3.5+ web server that's written to go fast."
  },
  {
    "name": "Quart",
    "url": "https://gitlab.com/pgjones/quart",
    "description": "An asyncio web microframework with the same API as Flask."
  },
  {
    "name": "Vibora",
    "url": "https://github.com/vibora-io/vibora",
    "description": "Performant web framework inspired by Flask."
  },
  {
    "name": "cirrina",
    "url": "https://github.com/neolynx/cirrina",
    "description": "Opinionated asynchronous web framework based on aiohttp."
  },
  {
    "name": "autobahn",
    "url": "https://github.com/crossbario/autobahn-python",
    "description": "WebSocket and WAMP supporting asyncio and Twisted, for clients and servers."
  },
  {
    "name": "websockets",
    "url": "https://github.com/aaugustin/websockets/",
    "description": "A library for building WebSocket servers and clients in Python with a focus on correctness and simplicity."
  },
  {
    "name": "Tornado",
    "url": "http://www.tornadoweb.org/en/stable/",
    "description": "Performant web framework and asynchronous networking library."
  },
  {
    "name": "Japronto!",
    "url": "https://github.com/squeaky-pl/japronto",
    "description": "Experimental http toolkit built on top of uvloop and picohttpparser."
  },
  {
    "name": "Starlette",
    "url": "https://github.com/encode/starlette",
    "description": "A lightweight ASGI framework/toolkit for building high performance services."
  },
  {
    "name": "uvicorn",
    "url": "https://github.com/encode/uvicorn",
    "description": "The lightning-fast ASGI server."
  },
  {
    "name": "FastAPI",
    "url": "https://github.com/tiangolo/fastapi",
    "description": "A very high performance Python 3.6+ API framework based on type hints. Powered by Starlette and Pydantic."
  },
  {
    "name": "aioamqp",
    "url": "https://github.com/Polyconseil/aioamqp",
    "description": "AMQP implementation using asyncio."
  },
  {
    "name": "pyzmq",
    "url": "https://github.com/zeromq/pyzmq",
    "description": "Python bindings for ZeroMQ."
  },
  {
    "name": "aiozmq",
    "url": "https://github.com/aio-libs/aiozmq",
    "description": "Alternative Asyncio integration with ZeroMQ."
  },
  {
    "name": "crossbar",
    "url": "https://github.com/crossbario/crossbar",
    "description": "Crossbar.io is a networking platform for distributed and microservice applications."
  },
  {
    "name": "asyncio-nats",
    "url": "https://github.com/nats-io/asyncio-nats",
    "description": "Client for the NATS messaging system."
  },
  {
    "name": "aiokafka",
    "url": "https://github.com/aio-libs/aiokafka",
    "description": "Client for Apache Kafka."
  },
  {
    "name": "asyncpg",
    "url": "https://github.com/MagicStack/asyncpg",
    "description": "Fast PostgreSQL Database Client Library for Python/asyncio."
  },
  {
    "name": "asyncpgsa",
    "url": "https://github.com/CanopyTax/asyncpgsa",
    "description": "Asyncpg with sqlalchemy core support."
  },
  {
    "name": "aiopg",
    "url": "https://github.com/aio-libs/aiopg/",
    "description": "Library for accessing a PostgreSQL database."
  },
  {
    "name": "aiomysql",
    "url": "https://github.com/aio-libs/aiomysql",
    "description": "Library for accessing a MySQL database"
  },
  {
    "name": "aioodbc",
    "url": "https://github.com/aio-libs/aioodbc",
    "description": "Library for accessing a ODBC databases."
  },
  {
    "name": "motor",
    "url": "https://github.com/mongodb/motor",
    "description": "The async Python driver for MongoDB."
  },
  {
    "name": "aioredis",
    "url": "https://github.com/aio-libs/aioredis",
    "description": "aio-libs Redis client (PEP 3156)."
  },
  {
    "name": "asyncio-redis",
    "url": "https://github.com/jonathanslenders/asyncio-redis",
    "description": "Redis client for Python asyncio (PEP 3156)."
  },
  {
    "name": "aiocouchdb",
    "url": "https://github.com/aio-libs/aiocouchdb",
    "description": "CouchDB client built on top of aiohttp (asyncio)."
  },
  {
    "name": "aioinflux",
    "url": "https://github.com/plugaai/aioinflux",
    "description": "InfluxDB client built on top of aiohttp."
  },
  {
    "name": "aioes",
    "url": "https://github.com/aio-libs/aioes",
    "description": "Asyncio compatible driver for elasticsearch."
  },
  {
    "name": "peewee-async",
    "url": "https://github.com/05bit/peewee-async",
    "description": "ORM implementation based on peewee and aiopg."
  },
  {
    "name": "GINO",
    "url": "https://github.com/fantix/gino",
    "description": "is a lightweight asynchronous Python ORM based on SQLAlchemy core, with asyncpg dialect."
  },
  {
    "name": "Tortoise ORM",
    "url": "https://github.com/tortoise/tortoise-orm",
    "description": "native multi-backend ORM with Django-like API and easy relations management."
  },
  {
    "name": "Databases",
    "url": "https://github.com/encode/databases",
    "description": "Async database access for SQLAlchemy core, with support for PostgreSQL, MySQL, and SQLite."
  },
  {
    "name": "AsyncSSH",
    "url": "https://github.com/ronf/asyncssh",
    "description": "Provides an asynchronous client and server implementation of the SSHv2 protocol."
  },
  {
    "name": "aiodns",
    "url": "https://github.com/saghul/aiodns",
    "description": "Simple DNS resolver for asyncio"
  },
  {
    "name": "httpx",
    "url": "https://github.com/encode/httpx",
    "description": "asynchronous HTTP client for Python 3 with requests compatible API."
  },
  {
    "name": "Ariadne",
    "url": "https://ariadnegraphql.org",
    "description": "Schema-first Python library for implementing GraphQL servers."
  },
  {
    "name": "Tartiflette",
    "url": "https://tartiflette.io/",
    "description": "Schema-first Python 3.6+ GraphQL engine built on top of libgraphqlparser."
  },
  {
    "name": "aiomock",
    "url": "https://github.com/nhumrich/aiomock/",
    "description": "A python mock library that supports async methods."
  },
  {
    "name": "asynctest",
    "url": "https://github.com/Martiusweb/asynctest/",
    "description": "Enhance the standard unittest package with features for testing. asyncio libraries"
  },
  {
    "name": "pytest-asyncio",
    "url": "https://github.com/pytest-dev/pytest-asyncio",
    "description": "Pytest support for asyncio."
  },
  {
    "name": "aresponses",
    "url": "https://github.com/CircleUp/aresponses",
    "description": "Asyncio http mocking. Similar to the responses library used for requests"
  },
  {
    "name": "aioresponses",
    "url": "https://github.com/pnuckowski/aioresponses",
    "description": "Helper for mock/fake web requests in Python aiohttp package."
  },
  {
    "name": "uvloop",
    "url": "https://github.com/MagicStack/uvloop",
    "description": "Ultra fast implementation of asyncio event loop on top of libuv."
  },
  {
    "name": "aiocache",
    "url": "https://github.com/argaen/aiocache",
    "description": "Cache manager for different backends."
  },
  {
    "name": "aiofiles",
    "url": "https://github.com/Tinche/aiofiles/",
    "description": "File support for asyncio."
  },
  {
    "name": "aiodebug",
    "url": "https://github.com/qntln/aiodebug",
    "description": "A tiny library for monitoring and testing asyncio programs."
  },
  {
    "name": "aiorun",
    "url": "https://github.com/cjrh/aiorun",
    "description": "A run() function that handles all the usual boilerplate for startup and graceful shutdown."
  },
  {
    "name": "aioserial",
    "url": "https://github.com/changyuheng/aioserial",
    "description": "A drop-in replacement of pySerial."
  },
  {
    "name": "aiozipkin",
    "url": "https://github.com/aio-libs/aiozipkin",
    "description": "Distributed tracing instrumentation for asyncio with zipkin"
  },
  {
    "name": "asgiref",
    "url": "https://github.com/django/asgiref",
    "description": "Backend utils for ASGI to WSGI integration, includes sync_to_async and async_to_sync function wrappers."
  },
  {
    "name": "ruia",
    "url": "https://github.com/howie6879/ruia",
    "description": "An async web scraping micro-framework based on asyncio."
  },
  {
    "name": "Official asyncio documentation",
    "url": "https://docs.python.org/3/library/asyncio.html",
    "description": "Asynchronous I/O, event loop, coroutines and tasks."
  },
  {
    "name": "Short well-written intro to asyncio",
    "url": "http://masnun.com/2015/11/13/python-generators-coroutines-native-coroutines-and-async-await.html",
    "description": "Generators, Coroutines, Native Coroutines and async/await."
  },
  {
    "name": "AsyncIO for the Working Python Developer",
    "url": "https://hackernoon.com/asyncio-for-the-working-python-developer-5c468e6e2e8e",
    "description": "A gentle introduction to asynchronous programming from basic examples working up to URL fetching."
  },
  {
    "name": "Test limits of Python aiohttp",
    "url": "https://pawelmhm.github.io/asyncio/python/aiohttp/2016/04/22/asyncio-aiohttp.html",
    "description": "Making 1 million requests with python-aiohttp."
  },
  {
    "name": "ASGI (Asynchronous Server Gateway Interface)",
    "url": "https://asgi.readthedocs.io/en/latest/",
    "description": "A spiritual successor to WSGI, intended to provide a standard interface between async-capable Python web servers, frameworks, and applications."
  },
  {
    "name": "First Principles Introduction to Asyncio",
    "url": "https://hackernoon.com/a-simple-introduction-to-pythons-asyncio-595d9c9ecf8c",
    "description": "A no-buzzword first principles introduction to the internal workings of asyncio."
  },
  {
    "name": "Developing and Testing an Asynchronous API with FastAPI and Pytest",
    "url": "https://testdriven.io/blog/fastapi-crud/",
    "description": "This tutorial looks at how to develop and test an asynchronous API with FastAPI using Test-Driven Development (TDD)."
  },
  {
    "name": "Topics of Interest (Python Asyncio) | screencast | slides",
    "url": "https://youtu.be/ZzfHjytDceU",
    "description": "PyCon Brasil 2015 keynote (David Beazley)."
  },
  {
    "name": "Python Asynchronous I/O Walkthrough | blog post",
    "url": "https://www.youtube.com/playlist?list=PLpEcQSRWP2IjVRlTUptdD05kG-UkJynQT",
    "description": "8-part code walkthrough (Philip Guo)."
  },
  {
    "name": "Async/await in Python 3.5 and why it is awesome",
    "url": "https://www.youtube.com/watch?v=m28fiN9y_r8&t=132s",
    "description": "EuroPython 2016 (Yury Selivanov)."
  },
  {
    "name": "Fear and Awaiting in Async: A Savage Journey to the Heart of the Coroutine Dream | screencast",
    "url": "https://www.youtube.com/watch?v=E-1Y4kSsAFc",
    "description": "PyOhio 2016 keynote (David Beazley)."
  },
  {
    "name": "Asynchronous Python for the Complete Beginner | slides",
    "url": "https://www.youtube.com/watch?v=iG6fr81xHKA",
    "description": "PyCon 2017 (Miguel Grinberg)."
  },
  {
    "name": "curio",
    "url": "https://github.com/dabeaz/curio",
    "description": "The coroutine concurrency library."
  },
  {
    "name": "Curio-Asyncio Bridge",
    "url": "https://github.com/dabeaz/curio/issues/190",
    "description": "basic curio -> asyncio coroutine bridge"
  },
  {
    "name": "trio",
    "url": "https://github.com/python-trio/trio",
    "description": "Pythonic async I/O for humans and snake people."
  },
  {
    "name": "trio-asyncio",
    "url": "https://github.com/python-trio/trio-asyncio",
    "description": "re-implementation of the asyncio mainloop on top of Trio"
  }
]
