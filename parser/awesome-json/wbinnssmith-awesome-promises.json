[
  {
    "name": "Promise Cookbook",
    "url": "https://github.com/mattdesl/promise-cookbook",
    "description": "The why, what, and how. \"A brief introduction [...] primarily aimed at frontend developers\"."
  },
  {
    "name": "Promises for Asynchronous Programming",
    "url": "http://exploringjs.com/es6/ch_promises.html",
    "description": "Chapter from Exploring ES6"
  },
  {
    "name": "You Don't Know JS: Promises",
    "url": "https://github.com/getify/You-Dont-Know-JS/blob/master/async%20&%20performance/ch3.md",
    "description": "Chapter from You Don't Know JS: Async & Performance"
  },
  {
    "name": "JavaScript Promises: There and back again",
    "url": "http://www.html5rocks.com/en/tutorials/es6/promises/",
    "description": "Basics of JavaScript's native promise implementation."
  },
  {
    "name": "JavaScript with Promises",
    "url": "http://shop.oreilly.com/product/0636920032151.do",
    "description": "from O'Reilly. Short and to-the-point. Uses native and bluebird."
  },
  {
    "name": "Promise it won't hurt",
    "url": "https://github.com/stevekane/promise-it-wont-hurt",
    "description": "An interactive nodeschool workshop"
  },
  {
    "name": "ES6 Kata Promises",
    "url": "http://es6katas.org/",
    "description": "Promises Katas : Basics"
  },
  {
    "name": "ES6 Promises in Depth",
    "url": "https://ponyfoo.com/articles/es6-promises-in-depth"
  },
  {
    "name": "You're Missing the Point of Promises",
    "url": "https://blog.domenic.me/youre-missing-the-point-of-promises/",
    "description": "Promises are much more than callback aggregation, and that jQuery's implementation (prior to 3.0) isn't enough."
  },
  {
    "name": "We have a problem with promises",
    "url": "https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html",
    "description": "\"Many of us are using promises without really understanding them.\""
  },
  {
    "name": "Promise anti-patterns",
    "url": "https://github.com/petkaantonov/bluebird/wiki/Promise-anti-patterns",
    "description": "Common misuses and how to avoid them."
  },
  {
    "name": "Promise anti-patterns (2)",
    "url": "http://taoofcode.net/promise-anti-patterns/",
    "description": "Another set of promises anti-patterns"
  },
  {
    "name": "Promise Ponderings, (Anti-)Patterns, and Apologies",
    "url": "https://sdgluck.github.io/2015/08/24/promise-ponderings-patterns-apologies/",
    "description": "Promise behaviour demonstrated and explained by common questions and their answers."
  },
  {
    "name": "Javascript Promises...In Wicked Detail",
    "url": "http://www.mattgreer.org/articles/promises-in-wicked-detail/",
    "description": "Recreate the promise implementation"
  },
  {
    "name": "Writing Promise-Using Specifications",
    "url": "https://www.w3.org/2001/tag/doc/promises-guide",
    "description": "\"This document gives guidance on how to write specifications that create, accept, or manipulate promises\""
  },
  {
    "name": "Promises/A+ specification",
    "url": "https://promisesaplus.com/"
  },
  {
    "name": "caniuse promises",
    "url": "http://caniuse.com/#feat=promises"
  },
  {
    "name": "Fates and States",
    "url": "https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md",
    "description": "Quick definitions of possible states."
  },
  {
    "name": "Promisees",
    "url": "https://bevacqua.github.io/promisees/",
    "description": "Promise visualization playground for the adventurous."
  },
  {
    "name": "pinkie",
    "url": "https://github.com/floatdrop/pinkie",
    "description": "Ponyfill. Node-oriented, but browserifyable. Extremely small implementation."
  },
  {
    "name": "native-promise-only",
    "url": "https://github.com/getify/native-promise-only",
    "description": "Polyfill. Browser and node-compatible."
  },
  {
    "name": "es6-promise",
    "url": "https://github.com/stefanpenner/es6-promise",
    "description": "Opt-in polyfill. A strict-spec subset of rsvp.js."
  },
  {
    "name": "lie",
    "url": "https://github.com/calvinmetcalf/lie",
    "description": "Small, browserifyable with an opt-in polyfill."
  },
  {
    "name": "bluebird",
    "url": "https://github.com/petkaantonov/bluebird",
    "description": "Fully featured, extremely performant. Long stack traces & generator/coroutine support."
  },
  {
    "name": "rsvp.js",
    "url": "https://github.com/tildeio/rsvp.js/",
    "description": "Lightweight with a few extras. Compatible down to IE6!"
  },
  {
    "name": "Q",
    "url": "https://github.com/kriskowal/q",
    "description": "One of the original implementations. Long stack traces and other goodies."
  },
  {
    "name": "then/promise",
    "url": "https://github.com/then/promise",
    "description": "Small with nodeify, denodify and done() additions."
  },
  {
    "name": "when.js",
    "url": "https://github.com/cujojs/when",
    "description": "Packed with control flow, functional, and utility methods."
  },
  {
    "name": "native-or-bluebird",
    "url": "https://www.npmjs.com/package/native-or-bluebird",
    "description": "Helps transition to completely native."
  },
  {
    "name": "pinkie-promise",
    "url": "https://github.com/floatdrop/pinkie-promise",
    "description": "Use native, or fall back to pinkie. Great for node library authors."
  },
  {
    "name": "any-promise",
    "url": "https://github.com/kevinbeaty/any-promise",
    "description": "Loads the first available implementation. Safe for browserify."
  },
  {
    "name": "pify",
    "url": "https://github.com/sindresorhus/pify",
    "description": "Promisify (\"denodify\") a callback-style function."
  },
  {
    "name": "promise-each",
    "url": "https://github.com/yoshuawuyts/promise-each",
    "description": "Standalone bluebird.each. Execute one after the other sequentially."
  },
  {
    "name": "promise-filter",
    "url": "https://github.com/yoshuawuyts/promise-filter",
    "description": "Standalone bluebird.filter. Filter an array to a promise."
  },
  {
    "name": "promise-finally",
    "url": "https://github.com/blakeembrey/promise-finally",
    "description": "Standalone bluebird finally(). Execute a handler unconditionally after others have been handled."
  },
  {
    "name": "promise-map",
    "url": "https://github.com/yoshuawuyts/promise-map",
    "description": "Standalone bluebird.map. Map an array to a promise."
  },
  {
    "name": "promise-method",
    "url": "https://github.com/wbinnssmith/promise-method",
    "description": "Standalone bluebird.method. Turn a synchronously-returning method into a promise-returning one."
  },
  {
    "name": "promise-props",
    "url": "https://github.com/exponentjs/promise-props",
    "description": "Standalone implementation of bluebird's bluebird.props or rsvp's RSVP.hash"
  },
  {
    "name": "promise-reduce",
    "url": "https://github.com/yoshuawuyts/promise-reduce",
    "description": "Standalone bluebird.reduce. Reduce an array to a promise."
  },
  {
    "name": "promise-some",
    "url": "https://github.com/yoshuawuyts/promise-some",
    "description": "Standalone bluebird.some. Check if an element passes the predicate, return a promise."
  },
  {
    "name": "promise-try",
    "url": "https://github.com/wbinnssmith/promise-try",
    "description": "Standalone bluebird.try. Execute a synchronously-returning function and return a promise."
  },
  {
    "name": "is-promise",
    "url": "https://github.com/then/is-promise",
    "description": "Determine if something looks like a Promise."
  },
  {
    "name": "sprom",
    "url": "https://github.com/then/sprom",
    "description": "Resolve when a stream ends. Optional buffering (be careful with this!)"
  },
  {
    "name": "task.js",
    "url": "https://github.com/mozilla/task.js",
    "description": "Write async functions in a blocking style using promises and generators. Like bluebird.coroutine."
  },
  {
    "name": "co",
    "url": "https://github.com/tj/co",
    "description": "Like task.js and bluebird.coroutine, but supports thunks too."
  },
  {
    "name": "lie-fs",
    "url": "https://www.npmjs.com/package/lie-fs",
    "description": "Promise wrappers for Node's FS API."
  },
  {
    "name": "immediate-promise",
    "url": "https://github.com/sindresorhus/immediate-promise",
    "description": "Returns a promise resolved in the next event loop - think setImmediate()."
  },
  {
    "name": "delay",
    "url": "https://github.com/sindresorhus/delay",
    "description": "Delay a promise a specified amount of time."
  },
  {
    "name": "promise-whilst",
    "url": "https://github.com/sindresorhus/promise-whilst",
    "description": "Calls a function repeatedly if and while a condition returns true and then resolves the promise."
  },
  {
    "name": "loud-rejection",
    "url": "https://github.com/sindresorhus/loud-rejection",
    "description": "Make unhandled promise rejections fail loudly instead of the default silent fail."
  },
  {
    "name": "promise-until",
    "url": "https://github.com/busterc/promise-until",
    "description": "Calls a function repeatedly if a condition returns false and until the condition returns true and then resolves the promise."
  },
  {
    "name": "promise-do-until",
    "url": "https://github.com/busterc/promise-do-until",
    "description": "Calls a function repeatedly until a condition returns true and then resolves the promise."
  },
  {
    "name": "promise-do-whilst",
    "url": "https://github.com/busterc/promise-do-whilst",
    "description": "Calls a function repeatedly while a condition returns true and then resolves the promise."
  },
  {
    "name": "promise-semaphore",
    "url": "https://github.com/samccone/promise-semaphore",
    "description": "Push a set of work to be done in a configurable serial fashion"
  }
]
