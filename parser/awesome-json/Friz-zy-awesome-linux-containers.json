[
  {
    "name": "OPEN CONTAINER INITIATIVE\nThe Open Container Initiative is a lightweight, open governance structure, to be formed under the auspices of the Linux Foundation, for the express purpose of creating open industry standards around container formats and runtime.",
    "url": "https://www.opencontainers.org/"
  },
  {
    "name": "Cloud Native Computing Foundation\nThe Cloud Native Computing Foundation will create and drive the adoption of a new set of common container technologies informed by technical merit and end user value, and inspired by Internet-scale computing.",
    "url": "https://cncf.io/"
  },
  {
    "name": "Cloud Foundry Foundation\nThe Cloud is our foundry.",
    "url": "https://www.cloudfoundry.org/foundation/"
  },
  {
    "name": "Open Container Specifications\nThis project is where the Open Container Initiative Specifications are written. This is a work in progress. ",
    "url": "https://github.com/opencontainers/specs"
  },
  {
    "name": "App Container basics\nApp Container (appc) is an open specification that defines several aspects of how to run applications in containers: an image format, runtime environment, and discovery protocol.",
    "url": "https://github.com/coreos/rkt/blob/master/Documentation/app-container.md"
  },
  {
    "name": "Systemd Container Interface\nSystemd is a suite of basic building blocks for a Linux system. It provides a system and service manager that runs as PID 1 and starts the rest of the system. If you write a container solution, please consider supporting the following interfaces.",
    "url": "https://wiki.freedesktop.org/www/Software/systemd/ContainerInterface/"
  },
  {
    "name": "Developer Cloud Platform\nPaaS from Docker creators.",
    "url": "https://www.dotcloud.com/"
  },
  {
    "name": "Google Cloud Platform\nRun Docker containers on Google Cloud Platform, powered by Kubernetes. Google Container Engine actively schedules your containers, based on declared needs, on a managed cluster of virtual machines. ",
    "url": "https://cloud.google.com/container-engine/"
  },
  {
    "name": "Mesosphere\nThe Mesosphere Datacenter Operating System (DCOS) is a new kind of operating system that spans all of the machines in your datacenter or cloud. It provides a highly elastic, and highly scalable way of deploying applications, services and big data infrastructure on shared resources.",
    "url": "https://mesosphere.com/"
  },
  {
    "name": "Kubernetes\nManage a cluster of Linux containers as a single system to accelerate Dev and simplify Ops.",
    "url": "http://kubernetes.io/"
  },
  {
    "name": "Jelastic\nUnlimited PaaS and Container-Based IaaS in a Joint Cloud Solution for DevOps.",
    "url": "http://jelastic.com/"
  },
  {
    "name": "Warden\nManages isolated, ephemeral, and resource controlled environments. Part of Cloud Foundry",
    "url": "https://github.com/cloudfoundry/warden",
    "description": "the open platform as a service project."
  },
  {
    "name": "Amazon EC2 Container Service \nContainer management service that supports Docker containers and allows you to easily run applications on a managed cluster of Amazon EC2 instances.",
    "url": "https://aws.amazon.com/ecs/"
  },
  {
    "name": "Joyent\nHigh-Performance Container-Native Infrastructure for Today's Demanding Real-Time Web and Mobile Applications.",
    "url": "https://www.joyent.com/"
  },
  {
    "name": "Docker\nAn open platform for distributed applications for developers and sysadmins. Standard de facto.",
    "url": "https://github.com/veggiemonk/awesome-docker#cloud-infrastructure"
  },
  {
    "name": "LXD\nDaemon based on liblxc offering a REST API to manage LXC containers.",
    "url": "https://github.com/lxc/lxd"
  },
  {
    "name": "OpenVZ\nOpenVZ is container-based virtualization for Linux. OpenVZ creates multiple secure, isolated Linux containers (otherwise known as VEs or VPSs) on a single physical server enabling better server utilization and ensuring that applications do not conflict.",
    "url": "https://openvz.org/Main_Page"
  },
  {
    "name": "runc\nrunc is a CLI tool for spawning and running containers according to the OCS specification.",
    "url": "https://github.com/opencontainers/runc"
  },
  {
    "name": "Bocker\nDocker implemented in around 100 lines of bash.",
    "url": "https://github.com/p8952/bocker"
  },
  {
    "name": "Rocket\nrkt (pronounced \"rock-it\") is a CLI for running app containers on Linux. rkt is designed to be composable, secure, and fast. Based on AppC specification.",
    "url": "https://github.com/coreos/rkt"
  },
  {
    "name": "LXC\nLXC is the well known set of tools, templates, library and language bindings. It's pretty low level, very flexible and covers just about every containment feature supported by the upstream kernel.",
    "url": "https://github.com/lxc/lxc"
  },
  {
    "name": "Vagga\nVagga is a fully-userspace container engine inspired by Vagrant and Docker, specialized for development environments.",
    "url": "https://github.com/tailhook/vagga"
  },
  {
    "name": "libct\nLibct is a containers management library which provides convenient API for frontend programs to rule a container during its whole lifetime.",
    "url": "https://github.com/xemul/libct"
  },
  {
    "name": "libvirt\nA big toolkit to interact with the virtualization capabilities of recent versions of Linux (and other OSes).",
    "url": "https://libvirt.org/drvlxc.html"
  },
  {
    "name": "systemd-nspawn\nSpawn a namespace container for debugging, testing and building. Part of systemd.",
    "url": "http://manpages.ubuntu.com/manpages/utopic/man1/systemd-nspawn.1.html"
  },
  {
    "name": "porto\nThe main goal of Porto is to create a convenient, reliable interface over several Linux kernel mechanism such as cgroups, namespaces, mounts, networking etc.",
    "url": "https://github.com/yandex/porto"
  },
  {
    "name": "Firejail\nFirejail is a SUID sandbox program that reduces the risk of security breaches by restricting the running environment of untrusted applications using Linux namespaces, seccomp-bpf and Linux capabilities.",
    "url": "https://l3net.wordpress.com/projects/firejail/"
  },
  {
    "name": "NsJail\nNsJail is a process isolation tool for Linux. It makes use of the namespacing, resource control, and seccomp-bpf syscall filter subsystems of the Linux kernel.",
    "url": "https://github.com/google/nsjail"
  },
  {
    "name": "Subuser\nSecuring the Linux desktop with Docker.",
    "url": "https://github.com/subuser-security/subuser"
  },
  {
    "name": "Snappy\nSnappy Ubuntu Core is a new rendition of Ubuntu with transactional updates",
    "url": "https://wiki.ubuntu.com/SecurityTeam/Specifications/SnappyConfinement",
    "description": "a minimal server image with the same libraries as todayâ€™s Ubuntu, but applications are provided through a simpler mechanism."
  },
  {
    "name": "xdg-app\nxdg-app is a system for building, distributing and running sandboxed desktop applications on Linux.",
    "url": "https://wiki.gnome.org/Projects/SandboxedApps"
  },
  {
    "name": "nsenter\nRun program with namespaces of other processes. Part of the util-linux.",
    "url": "http://man7.org/linux/man-pages/man1/nsenter.1.html"
  },
  {
    "name": "ip-netns\nProcess network namespace management. Part of the iproute2.",
    "url": "http://man7.org/linux/man-pages/man8/ip-netns.8.html"
  },
  {
    "name": "unshare\nRun program with some namespaces unshared from parent. Part of the util-linux.",
    "url": "http://man7.org/linux/man-pages/man1/unshare.1.html"
  },
  {
    "name": "python-nsenter\nThis Python package allows entering Linux kernel namespaces (mount, IPC, net, PID, user and UTS) by doing the \"setns\" syscall.",
    "url": "https://github.com/zalando/python-nsenter"
  },
  {
    "name": "butter\nPython library to interface to low level linux features (inotify, fanotify, timerfd, signalfd, eventfd, containers) with asyncio support.",
    "url": "https://pypi.python.org/pypi/butter"
  },
  {
    "name": "pyspaces\nWorks with Linux namespaces through glibc with pure python.",
    "url": "https://github.com/Friz-zy/pyspaces"
  },
  {
    "name": "CRIU\nCheckpoint/Restore In Userspace is a software tool for Linux operating system. Using this tool, you can freeze a running application (or part of it) and checkpoint it to a hard drive as a collection of files. CRIU integrated with Docker and LXC to implement Live migration of containers.",
    "url": "https://criu.org/Main_Page"
  },
  {
    "name": "LXC-Web-Panel\nWeb panel for LXC on Ubuntu.",
    "url": "https://lxc-webpanel.github.io/"
  },
  {
    "name": "Docker bench security\nThe Docker Bench for Security is a script that checks for dozens of common best-practices around deploying Docker containers in production.",
    "url": "https://github.com/docker/docker-bench-security"
  },
  {
    "name": "CoreOS Clair\nOpen Source Vulnerability Analysis for your Containers.",
    "url": "https://coreos.com/blog/vulnerability-analysis-for-containers/"
  },
  {
    "name": "bane\nCustom AppArmor profile generator for docker containers.",
    "url": "https://github.com/jfrazelle/bane"
  },
  {
    "name": "OpenSCAP\nThe OpenSCAP ecosystem provides multiple tools to assist administrators and auditors with assessment, measurement and enforcement of security baselines.",
    "url": "https://github.com/OpenSCAP/container-compliance"
  },
  {
    "name": "CIS Security Benchmarks",
    "url": "https://benchmarks.cisecurity.org/about/"
  },
  {
    "name": "Are Docker containers really secure?",
    "url": "https://opensource.com/business/14/7/docker-security-selinux"
  },
  {
    "name": "Bringing new security features to Docker",
    "url": "https://opensource.com/business/14/9/security-for-docker"
  },
  {
    "name": "Docker, Linux Containers (LXC), and security",
    "url": "http://www.slideshare.net/jpetazzo/docker-linux-containers-lxc-and-security"
  },
  {
    "name": "For containers, security is problem #1",
    "url": "http://www.itworld.com/article/2920349/security/for-containers-security-is-problem-1.html"
  },
  {
    "name": "Linux Container Security",
    "url": "https://mjg59.dreamwidth.org/33170.html"
  },
  {
    "name": "Ask HN: Best Linux sandbox?",
    "url": "https://news.ycombinator.com/item?id=10030868"
  },
  {
    "name": "CIS Docker 1.6 Benchmark v1.0.0",
    "url": "https://benchmarks.cisecurity.org/tools2/docker/CIS_Docker_1.6_Benchmark_v1.0.0.pdf"
  },
  {
    "name": "Understanding docker security and best practices",
    "url": "https://blog.docker.com/2015/05/understanding-docker-security-and-best-practices/"
  },
  {
    "name": "Update on Ubuntu Phone security issue",
    "url": "https://insights.ubuntu.com/2015/10/15/update-on-ubuntu-phone-security-issue/"
  },
  {
    "name": "Don't expose the Docker socket (not even to a container)",
    "url": "https://www.lvh.io/posts/dont-expose-the-docker-socket-not-even-to-a-container.html"
  },
  {
    "name": "RedHut Blog\n\n\nIntroduction to Linux Containers\nWhatâ€™s Next for Containers? User Namespaces\nArchitecting Containers Part 1: Why Understanding User Space vs. Kernel Space Matters\nArchitecting Containers Part 2: Why the User Space Matters\n",
    "url": "http://rhelblog.redhat.com/?s=container&submit=Search"
  },
  {
    "name": "Introduction to Linux Containers",
    "url": "https://access.redhat.com/articles/1353593"
  },
  {
    "name": "Whatâ€™s Next for Containers? User Namespaces",
    "url": "http://rhelblog.redhat.com/2015/07/07/whats-next-for-containers-user-namespaces/#more-1004"
  },
  {
    "name": "Architecting Containers Part 1: Why Understanding User Space vs. Kernel Space Matters",
    "url": "http://rhelblog.redhat.com/2015/07/29/architecting-containers-part-1-user-space-vs-kernel-space/"
  },
  {
    "name": "Architecting Containers Part 2: Why the User Space Matters",
    "url": "http://rhelblog.redhat.com/2015/09/17/architecting-containers-part-2-why-the-user-space-matters-2/"
  },
  {
    "name": "sysdig-container-ecosystem\nThe ecosystem of awesome new technologies emerging around containers and microservices can be a little overwhelming, to say the least. We thought we might be able to help: welcome to the Container Ecosystem Project.",
    "url": "https://github.com/draios/sysdig-container-ecosystem"
  },
  {
    "name": "doger.io\nThis page is an attempt to document the ins and outs of containers on Linux. This is not just restricted to programmers looking to implement containers or use container like features in their own code but also Sysadmins and Users who want to get more of a handle on how containers work 'under the hood'. ",
    "url": "http://doger.io/"
  }
]
