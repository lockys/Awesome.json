[
  {
    "name": "mypy",
    "url": "https://github.com/python/mypy",
    "description": "Optional static typing (PEP 484)."
  },
  {
    "name": "pyanalyze",
    "url": "https://github.com/quora/pyanalyze",
    "description": "Extensible static analyzer and type checker."
  },
  {
    "name": "pycharm",
    "url": "https://www.jetbrains.com/pycharm/",
    "description": "IDE for Professional Developers."
  },
  {
    "name": "pyre",
    "url": "https://pyre-check.org/",
    "description": "Performant type-checker."
  },
  {
    "name": "pyright",
    "url": "https://github.com/Microsoft/pyright",
    "description": "Fast type checker meant for large Python source bases. It can run in a “watch” mode and performs fast incremental updates when files are modified."
  },
  {
    "name": "pytype",
    "url": "https://github.com/google/pytype",
    "description": "Tool to check and infer types - without requiring type annotations."
  },
  {
    "name": "beartype",
    "url": "https://github.com/beartype/beartype",
    "description": "Unbearably fast O(1) runtime type-checking in pure Python."
  },
  {
    "name": "pydantic",
    "url": "https://github.com/samuelcolvin/pydantic",
    "description": "Data parsing using Python type hinting. Supports dataclasses."
  },
  {
    "name": "pytypes",
    "url": "https://github.com/Stewori/pytypes",
    "description": "Provides a rich set of utilities for runtime typechecking."
  },
  {
    "name": "strongtyping",
    "url": "https://github.com/FelixTheC/strongtyping",
    "description": "Decorator which checks whether the function is called with the correct type of parameters."
  },
  {
    "name": "typedpy",
    "url": "https://github.com/loyada/typedpy",
    "description": "Type-safe, strict Python. Works well with standard Python."
  },
  {
    "name": "typeguard",
    "url": "https://github.com/agronholm/typeguard",
    "description": "Another one runtime type checker."
  },
  {
    "name": "typical",
    "url": "https://github.com/seandstewart/typical/",
    "description": "Data parsing and automatic type-coercion using type hinting. Supports dataclasses, standard classes, function signatures, and more."
  },
  {
    "name": "trycast",
    "url": "https://github.com/davidfstr/trycast",
    "description": "Parse JSON-like values whose shape is defined by typed dictionaries (TypedDicts) and other standard Python type hints."
  },
  {
    "name": "asgiref",
    "url": "https://github.com/django/asgiref",
    "description": "ASGI specification, provides asgiref.typing module with type annotations for ASGI servers."
  },
  {
    "name": "boto3-stubs",
    "url": "https://vemel.github.io/boto3_stubs_docs/",
    "description": "Stubs for boto3."
  },
  {
    "name": "types-aiobotocore",
    "url": "https://vemel.github.io/types_aiobotocore_docs/",
    "description": "Stubs for aiobotocore."
  },
  {
    "name": "botostubs",
    "url": "https://github.com/jeshan/botostubs",
    "description": "Gives you code assistance for any boto3 API in any IDE."
  },
  {
    "name": "celery-types",
    "url": "https://github.com/sbdchd/celery-types",
    "description": "Type stubs for Celery and its related packages django-celery-results, ampq, kombu, billiard, vine and ephem."
  },
  {
    "name": "data-science-types",
    "url": "https://github.com/predictive-analytics-lab/data-science-types",
    "description": "Stubs for numpy, pandas, and matplotlib."
  },
  {
    "name": "django-stubs",
    "url": "https://github.com/typeddjango/django-stubs",
    "description": "Stubs for Django."
  },
  {
    "name": "djangorestframework-stubs",
    "url": "https://github.com/typeddjango/djangorestframework-stubs",
    "description": "Stubs for DRF."
  },
  {
    "name": "grpc-stubs",
    "url": "https://github.com/shabbyrobe/grpc-stubs",
    "description": "Stubs for grpc."
  },
  {
    "name": "lxml-stubs",
    "url": "https://github.com/lxml/lxml-stubs",
    "description": "Stubs for lxml."
  },
  {
    "name": "ordered-set-stubs",
    "url": "https://github.com/rominf/ordered-set-stubs",
    "description": "Stubs for OrderedSet."
  },
  {
    "name": "PyQt5-stubs",
    "url": "https://github.com/stlehmann/PyQt5-stubs",
    "description": "Stubs for PyQt5."
  },
  {
    "name": "pyspark-stubs",
    "url": "https://github.com/zero323/pyspark-stubs",
    "description": "Stubs for PySpark."
  },
  {
    "name": "pythonista-stubs",
    "url": "https://github.com/hbmartin/pythonista-stubs",
    "description": "Stubs for Pythonista."
  },
  {
    "name": "sqlalchemy-stubs",
    "url": "https://github.com/dropbox/sqlalchemy-stubs",
    "description": "Stubs for SQLAlchemy."
  },
  {
    "name": "sqlalchemy2-stubs",
    "url": "https://docs.sqlalchemy.org/en/14/orm/extensions/mypy.html",
    "description": "Official stubs and mypy plugin for SQLAlchemy."
  },
  {
    "name": "torchtyping",
    "url": "https://github.com/patrick-kidger/torchtyping",
    "description": "Enhanced type annotations for pytorch."
  },
  {
    "name": "typeshed",
    "url": "https://github.com/python/typeshed",
    "description": "Collection of library stubs, with static types."
  },
  {
    "name": "wsgitypes",
    "url": "https://github.com/shabbyrobe/wsgitypes",
    "description": "Typing for WSGI application implementers. These are not stub files, they're interfaces you mark support for to help typecheck WSGI conformance."
  },
  {
    "name": "meiga",
    "url": "https://github.com/alice-biometrics/meiga",
    "description": "Simple, typed and monad-based Result type."
  },
  {
    "name": "option",
    "url": "https://github.com/MaT1g3R/option",
    "description": "Rust like Option and Result types."
  },
  {
    "name": "phantom-types",
    "url": "https://github.com/antonagestam/phantom-types",
    "description": "Phantom types."
  },
  {
    "name": "returns",
    "url": "https://github.com/dry-python/returns",
    "description": "Make your functions return something meaningful, typed, and safe."
  },
  {
    "name": "safetywrap",
    "url": "https://github.com/mplanchard/safetywrap",
    "description": "Fully typesafe, Rust-like Result and Option types."
  },
  {
    "name": "typet",
    "url": "https://github.com/contains-io/typet",
    "description": "Length-bounded types, dynamic object validation."
  },
  {
    "name": "typed-ast",
    "url": "https://github.com/python/typed_ast",
    "description": "Modified fork of CPython's ast module that parses # type: comments."
  },
  {
    "name": "typing-extensions",
    "url": "https://github.com/python/typing/tree/master/typing_extensions",
    "description": "Backported and experimental type hints."
  },
  {
    "name": "typing-utils",
    "url": "https://github.com/bojiang/typing_utils",
    "description": "Backport 3.8+ runtime typing utils(for eg: get_origin) & add issubtype & more."
  },
  {
    "name": "typingplus",
    "url": "https://github.com/contains-io/typingplus/",
    "description": "Backport support, dynamic is_instance and cast for abstract types."
  },
  {
    "name": "flake8-annotations-complexity",
    "url": "https://github.com/best-doctor/flake8-annotations-complexity",
    "description": "Plugin for flake8 to validate annotations complexity."
  },
  {
    "name": "flake8-annotations",
    "url": "https://github.com/sco1/flake8-annotations",
    "description": "Plugin for flake8 to check for presence of type annotations in function definitions."
  },
  {
    "name": "flake8-pyi",
    "url": "https://github.com/ambv/flake8-pyi",
    "description": "Plugin for Flake8 that provides specializations for type hinting stub files."
  },
  {
    "name": "flake8-type-checking",
    "url": "https://github.com/snok/flake8-type-checking",
    "description": "Plugin to help you guard any type-annotation-only import correctly."
  },
  {
    "name": "flake8-typing-imports",
    "url": "https://github.com/asottile/flake8-typing-imports",
    "description": "Plugin which checks that typing imports are properly guarded."
  },
  {
    "name": "flake8-typing-only-imports",
    "url": "https://github.com/sondrelg/flake8-typing-only-imports",
    "description": "flake8 plugin that helps identify which imports to put into type-checking blocks, and how to adjust your type annotations once imports are moved."
  },
  {
    "name": "flake8-type-ignore",
    "url": "https://gitlab.com/jonafato/flake8-type-ignore/",
    "description": "flake8 plugin to disallow type: ignore comments in your typed Python code."
  },
  {
    "name": "wemake-python-styleguide",
    "url": "https://github.com/wemake-services/wemake-python-styleguide",
    "description": "The strictest and most opinionated Python linter ever."
  },
  {
    "name": "mypy-test",
    "url": "https://github.com/orsinium-labs/mypy-test",
    "description": "Test mypy plugins, stubs, custom types."
  },
  {
    "name": "pytest-mypy-plugins",
    "url": "https://github.com/typeddjango/pytest-mypy-plugins",
    "description": "Pytest plugin for testing mypy types, stubs, and plugins."
  },
  {
    "name": "pytest-mypy-testing",
    "url": "https://github.com/davidfritzsche/pytest-mypy-testing",
    "description": "Pytest plugin to test mypy static type analysis."
  },
  {
    "name": "pytest-mypy",
    "url": "https://github.com/dbader/pytest-mypy",
    "description": "Mypy static type checker plugin for Pytest."
  },
  {
    "name": "com2ann",
    "url": "https://github.com/ilevkivskyi/com2ann",
    "description": "Tool for translation of type comments to type annotations."
  },
  {
    "name": "merge-pyi",
    "url": "https://github.com/google/pytype/tree/master/pytype/tools/merge_pyi",
    "description": "Part of pytype toolchain, applies stub files onto source code."
  },
  {
    "name": "mypy-protobuf",
    "url": "https://github.com/dropbox/mypy-protobuf",
    "description": "Tool to generate mypy stubs from protobufs."
  },
  {
    "name": "mypy-silent",
    "url": "https://github.com/whtsky/mypy-silent/",
    "description": "Silence mypy by adding or removing code comments."
  },
  {
    "name": "mypyc",
    "url": "https://github.com/python/mypy/tree/master/mypyc",
    "description": "Compiles mypy-annotated, statically typed Python modules into CPython C extensions."
  },
  {
    "name": "retype",
    "url": "https://github.com/ambv/retype",
    "description": "Another tool to apply stubs to code."
  },
  {
    "name": "pep585-upgrade",
    "url": "https://github.com/snok/pep585-upgrade",
    "description": "Pre-commit hook configured to automatically upgrade your type hints to the new native types implemented in PEP 585."
  },
  {
    "name": "typeforce",
    "url": "https://github.com/orsinium-labs/typeforce",
    "description": "CLI tool that enriches your Python environment with type annotations, empowering mypy."
  },
  {
    "name": "typing-inspect",
    "url": "https://github.com/ilevkivskyi/typing_inspect",
    "description": "The typing_inspect module defines experimental API for runtime inspection of types defined in the typing module."
  },
  {
    "name": "typing-json",
    "url": "https://pypi.org/project/typing-json/",
    "description": "Lib for working with typed objects and JSON."
  },
  {
    "name": "autotyping",
    "url": "https://github.com/JelleZijlstra/autotyping",
    "description": "Automatically add simple return type annotations for functions (bool, None, Optional)."
  },
  {
    "name": "monkeytype",
    "url": "https://github.com/instagram/MonkeyType",
    "description": "Collects runtime types of function arguments and return values, and can automatically generate stub files or even add draft type annotations directly to your code based on the types collected at runtime."
  },
  {
    "name": "pyannotate",
    "url": "https://github.com/dropbox/pyannotate",
    "description": "Insert annotations into your source code based on call arguments and return types observed at runtime."
  },
  {
    "name": "pyre infer",
    "url": "https://github.com/facebook/pyre-check",
    "description": "Pyre has a powerful feature for migrating codebases to a typed format. The infer command-line option ingests a file or directory, makes educated guesses about the types used, and applies the annotations to the files."
  },
  {
    "name": "pytest-annotate",
    "url": "https://github.com/kensho-technologies/pytest-annotate",
    "description": "Pyannotate plugin for pytest."
  },
  {
    "name": "pytest-monkeytype",
    "url": "https://github.com/mariusvniekerk/pytest-monkeytype",
    "description": "MonkeyType plugin for pytest."
  },
  {
    "name": "pytype annotate-ast",
    "url": "https://github.com/google/pytype/tree/master/pytype/tools/annotate_ast",
    "description": "A work-in-progress tool to annotate the nodes of an AST with their Python types."
  },
  {
    "name": "type4py",
    "url": "https://github.com/saltudelft/type4py",
    "description": "Deep Similarity Learning-Based Type Inference."
  },
  {
    "name": "typilus",
    "url": "https://github.com/typilus/typilus",
    "description": "A deep learning algorithm for predicting types in Python. Also available as a GitHub action"
  },
  {
    "name": "auto-optional",
    "url": "https://github.com/Luttik/auto-optional",
    "description": "Makes typed arguments Optional when the default argument is None."
  },
  {
    "name": "kubernetes-typed",
    "url": "https://github.com/gordonbondon/kubernetes-typed",
    "description": "Plugin for kubernetes CRD type checking."
  },
  {
    "name": "loguru-mypy",
    "url": "https://github.com/kornicameister/loguru-mypy",
    "description": "Plugin for loguru support."
  },
  {
    "name": "mypy-zope",
    "url": "https://github.com/Shoobx/mypy-zope",
    "description": "Plugin for zope.interface support."
  },
  {
    "name": "mypy/plugins",
    "url": "https://github.com/python/mypy/tree/master/mypy/plugins",
    "description": "Plugins already integrated into mypy."
  },
  {
    "name": "numpy",
    "url": "https://numpy.org/devdocs/reference/typing.html",
    "description": "Plugin for NumPy support."
  },
  {
    "name": "pynamodb-mypy",
    "url": "https://github.com/pynamodb/pynamodb-mypy",
    "description": "Plugin for PynamoDB support."
  },
  {
    "name": "emacs-flycheck-mypy",
    "url": "https://github.com/lbolla/emacs-flycheck-mypy",
    "description": "Mypy integration for Emacs."
  },
  {
    "name": "linter-mypy",
    "url": "https://atom.io/packages/linter-mypy",
    "description": "Mypy integration for Atom."
  },
  {
    "name": "mypy-playground",
    "url": "https://github.com/ymyzk/mypy-playground",
    "description": "Online playground for mypy."
  },
  {
    "name": "mypy-pycharm-plugin",
    "url": "https://github.com/dropbox/mypy-PyCharm-plugin",
    "description": "Mypy integration for PyCharm."
  },
  {
    "name": "pylance",
    "url": "https://github.com/microsoft/pylance-release",
    "description": "PyRight integration for VSCode."
  },
  {
    "name": "vim-mypy",
    "url": "https://github.com/Integralist/vim-mypy",
    "description": "Mypy integration for Vim."
  },
  {
    "name": "nbQA",
    "url": "https://github.com/nbQA-dev/nbQA",
    "description": "Run type checkers (e.g. Mypy) on Jupyter Notebooks."
  },
  {
    "name": "PEP-3107",
    "url": "https://www.python.org/dev/peps/pep-3107",
    "description": "Function Annotations."
  },
  {
    "name": "PEP-482",
    "url": "https://www.python.org/dev/peps/pep-0482/",
    "description": "Literature Overview for Type Hints."
  },
  {
    "name": "PEP-483",
    "url": "https://www.python.org/dev/peps/pep-0483/",
    "description": "The Theory of Type Hints."
  },
  {
    "name": "PEP-484",
    "url": "https://www.python.org/dev/peps/pep-0484/",
    "description": "Type Hints."
  },
  {
    "name": "PEP-526",
    "url": "https://www.python.org/dev/peps/pep-0526/",
    "description": "Syntax for Variable Annotations."
  },
  {
    "name": "PEP-544",
    "url": "https://www.python.org/dev/peps/pep-0544/",
    "description": "Protocols: Structural subtyping (static duck typing)."
  },
  {
    "name": "PEP-557",
    "url": "https://www.python.org/dev/peps/pep-0557/",
    "description": "Data Classes."
  },
  {
    "name": "PEP-560",
    "url": "https://www.python.org/dev/peps/pep-0560/",
    "description": "Core support for typing module and generic types."
  },
  {
    "name": "PEP-561",
    "url": "https://www.python.org/dev/peps/pep-0561/",
    "description": "Distributing and Packaging Type Information."
  },
  {
    "name": "PEP-563",
    "url": "https://www.python.org/dev/peps/pep-0563/",
    "description": "Postponed Evaluation of Annotations."
  },
  {
    "name": "PEP-585",
    "url": "https://www.python.org/dev/peps/pep-0585/",
    "description": "Type Hinting Generics In Standard Collections."
  },
  {
    "name": "PEP-586",
    "url": "https://www.python.org/dev/peps/pep-0586/",
    "description": "Literal Types."
  },
  {
    "name": "PEP-589",
    "url": "https://www.python.org/dev/peps/pep-0589/",
    "description": "TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys."
  },
  {
    "name": "PEP-591",
    "url": "https://www.python.org/dev/peps/pep-0591/",
    "description": "Adding a final qualifier to typing."
  },
  {
    "name": "PEP-593",
    "url": "https://www.python.org/dev/peps/pep-0593/",
    "description": "Flexible function and variable annotations."
  },
  {
    "name": "PEP-604",
    "url": "https://www.python.org/dev/peps/pep-0604/",
    "description": "Complementary syntax for Union[]."
  },
  {
    "name": "PEP-612",
    "url": "https://www.python.org/dev/peps/pep-0612/",
    "description": "Parameter Specification Variables."
  },
  {
    "name": "PEP-613",
    "url": "https://www.python.org/dev/peps/pep-0613/",
    "description": "Explicit Type Aliases."
  },
  {
    "name": "1-minute guide to real constants in Python",
    "url": "https://sobolevn.me/2018/07/real-python-contants",
    "description": "Full tutorial about Final constants and inheritance."
  },
  {
    "name": "Simple dependent types in Python",
    "url": "https://sobolevn.me/2019/01/simple-dependent-types-in-python",
    "description": "Full tutorial about Literal types."
  },
  {
    "name": "Testing mypy stubs, plugins, and types",
    "url": "https://sobolevn.me/2019/08/testing-mypy-types",
    "description": "Full tutorial about testing mypy types."
  },
  {
    "name": "PyTest MonkeyType Introduction",
    "url": "https://dev.to/ldrscke/type-annotate-an-existing-python-django-codebase-with-monkeytype-254i",
    "description": "Type Annotate an existing Python Django Codebase with MonkeyType."
  },
  {
    "name": "The state of type hints in Python",
    "url": "https://bernat.tech/posts/the-state-of-type-hints-in-python/",
    "description": "As of May 2018."
  },
  {
    "name": "Type hints cheat sheet",
    "url": "https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html",
    "description": "Cheat sheet on writing type annotations by MyPy team."
  },
  {
    "name": "Typechecking Django and DRF",
    "url": "https://sobolevn.me/2019/08/typechecking-django-and-drf",
    "description": "Full tutorial about type-checking django."
  },
  {
    "name": "Type Check Your Django Application",
    "url": "https://kracekumar.com/post/type_check_your_django_app/",
    "description": "An article based on two recent talks on adding type checks to Django."
  },
  {
    "name": "typing",
    "url": "https://docs.python.org/3/library/typing.html",
    "description": "Official Python documentation for typing module."
  },
  {
    "name": "Python-typing-koans",
    "url": "https://github.com/kracekumar/python-typing-koans/",
    "description": "A set of examples to learn optional static typing in Python."
  },
  {
    "name": "Adding type hints to urllib3",
    "url": "https://sethmlarson.dev/blog/2021-10-18/tests-arent-enough-case-study-after-adding-types-to-urllib3",
    "description": "Tests are not enough: Case study adding type hints to urllib3."
  },
  {
    "name": "Adam Johnsons Blog",
    "url": "https://adamj.eu/tech/tag/mypy/",
    "description": "Adam Johnson blogs about typing practices."
  },
  {
    "name": "ParamSpec Guide",
    "url": "https://sobolevn.me/2021/12/paramspec-guide",
    "description": "Newly released feature in PEP612 allows you do a lot of advanced typing things with functions and their signatures."
  },
  {
    "name": "Static Typing Python Decorators",
    "url": "https://rednafi.github.io/reflections/static-typing-python-decorators.html",
    "description": "Accurately static typing decorators in Python is an icky business. The wrapper function obfuscates type information required to statically determine the types of the parameters and the return values of the wrapped function."
  },
  {
    "name": "python/typing",
    "url": "https://gitter.im/python/typing",
    "description": "Official typing gitter chat."
  },
  {
    "name": "TypedDjango",
    "url": "https://gitter.im/mypy-django/Lobby",
    "description": "Official organisation gitter chat."
  },
  {
    "name": "PythonRu#typing",
    "url": "https://python-ru.slack.com",
    "description": "Russian slack chat (invites are here) about types."
  },
  {
    "name": "awesome-python",
    "url": "https://github.com/vinta/awesome-python",
    "description": "Curated list of awesome Python frameworks, libraries, software and resources."
  },
  {
    "name": "python-typecheckers",
    "url": "https://github.com/ethanhs/python-typecheckers",
    "description": "List of Python type checkers: static and runtime."
  }
]
