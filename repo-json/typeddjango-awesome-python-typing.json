[
  {
    "name": "mypy",
    "url": "https://github.com/python/mypy",
    "description": "Optional static typing for Python 3 and 2 (PEP 484)."
  },
  {
    "name": "pyre",
    "url": "https://pyre-check.org/",
    "description": "Performant type-checker for Python 3."
  },
  {
    "name": "pytype",
    "url": "https://github.com/google/pytype",
    "description": "Tool to check and infer types for Python code - without requiring type annotations."
  },
  {
    "name": "PyCharm",
    "url": "https://www.jetbrains.com/pycharm/",
    "description": "IDE for Professional Developers."
  },
  {
    "name": "pyright",
    "url": "https://github.com/Microsoft/pyright",
    "description": "Fast type checker meant for large Python source bases. It can run in a “watch” mode and performs fast incremental updates when files are modified."
  },
  {
    "name": "pyanalyze",
    "url": "https://github.com/quora/pyanalyze",
    "description": "Extensible static analyzer and type checker for Python."
  },
  {
    "name": "beartype",
    "url": "https://github.com/beartype/beartype",
    "description": "Unbearably fast O(1) runtime type-checking in pure Python."
  },
  {
    "name": "pytypes",
    "url": "https://github.com/Stewori/pytypes",
    "description": "Provides a rich set of utilities for runtime typechecking."
  },
  {
    "name": "pydantic",
    "url": "https://github.com/samuelcolvin/pydantic",
    "description": "Data parsing using Python type hinting. Supports dataclasses."
  },
  {
    "name": "typeguard",
    "url": "https://github.com/agronholm/typeguard",
    "description": "Another one runtime type checker."
  },
  {
    "name": "typical",
    "url": "https://github.com/seandstewart/typical/",
    "description": "Data parsing and automatic type-coercion using type hinting. Supports dataclasses, standard classes, function signatures, and more."
  },
  {
    "name": "Typeshed",
    "url": "https://github.com/python/typeshed",
    "description": "Collection of library stubs for Python, with static types."
  },
  {
    "name": "django-stubs",
    "url": "https://github.com/typeddjango/django-stubs",
    "description": "Stubs for Django."
  },
  {
    "name": "djangorestframework-stubs",
    "url": "https://github.com/typeddjango/djangorestframework-stubs",
    "description": "Stubs for DRF."
  },
  {
    "name": "dry-python/returns",
    "url": "https://github.com/dry-python/returns",
    "description": "Stubs for returns."
  },
  {
    "name": "sqlalchemy-stubs",
    "url": "https://github.com/dropbox/sqlalchemy-stubs",
    "description": "Stubs for SQLAlchemy."
  },
  {
    "name": "grpc-stubs",
    "url": "https://github.com/shabbyrobe/grpc-stubs",
    "description": "Stubs for grpc."
  },
  {
    "name": "boto3-stubs",
    "url": "https://github.com/vemel/mypy_boto3_builder",
    "description": "Stubs for boto3."
  },
  {
    "name": "botostubs",
    "url": "https://github.com/jeshan/botostubs",
    "description": "Gives you code assistance for any boto3 API in any IDE."
  },
  {
    "name": "PyQt5-stubs",
    "url": "https://github.com/stlehmann/PyQt5-stubs",
    "description": "Stubs for PyQt5."
  },
  {
    "name": "lxml-stubs",
    "url": "https://github.com/lxml/lxml-stubs",
    "description": "Stubs for lxml."
  },
  {
    "name": "ordered-set-stubs",
    "url": "https://github.com/rominf/ordered-set-stubs",
    "description": "Stubs for OrderedSet."
  },
  {
    "name": "pyspark-stubs",
    "url": "https://github.com/zero323/pyspark-stubs",
    "description": "Stubs for PySpark."
  },
  {
    "name": "pythonista-stubs",
    "url": "https://github.com/hbmartin/pythonista-stubs",
    "description": "Stubs for Pythonista."
  },
  {
    "name": "wsgitypes",
    "url": "https://github.com/shabbyrobe/wsgitypes",
    "description": "Typing for WSGI application implementers. These are not stub files, they're interfaces you mark support for to help typecheck WSGI conformance."
  },
  {
    "name": "data-science-types",
    "url": "https://github.com/predictive-analytics-lab/data-science-types",
    "description": "Stubs for NumPy, pandas, and Matplotlib."
  },
  {
    "name": "typed-ast",
    "url": "https://github.com/python/typed_ast",
    "description": "Modified fork of CPython's ast module that parses # type: comments."
  },
  {
    "name": "typing-extensions",
    "url": "https://github.com/python/typing/tree/master/typing_extensions",
    "description": "Backported and experimental type hints."
  },
  {
    "name": "typingplus",
    "url": "https://github.com/contains-io/typingplus/",
    "description": "Backport support, dynamic is_instance and cast for abstract types."
  },
  {
    "name": "typet",
    "url": "https://github.com/contains-io/typet",
    "description": "Length-bounded types, dynamic object validation."
  },
  {
    "name": "typing_utils",
    "url": "https://github.com/bojiang/typing_utils",
    "description": "Backport 3.8+ runtime typing utils(for eg: get_origin) & add issubtype & more."
  },
  {
    "name": "wemake-python-styleguide",
    "url": "https://github.com/wemake-services/wemake-python-styleguide",
    "description": "The strictest and most opinionated python linter ever."
  },
  {
    "name": "flake8-mypy",
    "url": "https://github.com/ambv/flake8-mypy",
    "description": "Plugin for flake8 integrating mypy."
  },
  {
    "name": "flake8-pyi",
    "url": "https://github.com/ambv/flake8-pyi",
    "description": "Plugin for Flake8 that provides specializations for type hinting stub files."
  },
  {
    "name": "flake8-annotations-complexity",
    "url": "https://github.com/best-doctor/flake8-annotations-complexity",
    "description": "Plugin for flake8 to validate annotations complexity."
  },
  {
    "name": "flake8-annotations",
    "url": "https://github.com/sco1/flake8-annotations",
    "description": "Plugin for flake8 to check for presence of type annotations in function definitions."
  },
  {
    "name": "flake8-typing-imports",
    "url": "https://github.com/asottile/flake8-typing-imports",
    "description": "Plugin which checks that typing imports are properly guarded."
  },
  {
    "name": "flake8-typing-only-imports",
    "url": "https://github.com/sondrelg/flake8-typing-only-imports",
    "description": "flake8 plugin that helps identify which imports to put into type-checking blocks, and how to adjust your type annotations once imports are moved."
  },
  {
    "name": "pytest-mypy",
    "url": "https://github.com/dbader/pytest-mypy",
    "description": "Mypy static type checker plugin for Pytest."
  },
  {
    "name": "pytest-mypy-plugins",
    "url": "https://github.com/typeddjango/pytest-mypy-plugins",
    "description": "Pytest plugin for testing mypy types, stubs, and plugins."
  },
  {
    "name": "pytest-mypy-testing",
    "url": "https://github.com/davidfritzsche/pytest-mypy-testing",
    "description": "Pytest plugin to test mypy static type analysis."
  },
  {
    "name": "merge_pyi",
    "url": "https://github.com/google/pytype/tree/master/pytype/tools/merge_pyi",
    "description": "Part of pytype toolchain, applies stub files onto source code."
  },
  {
    "name": "retype",
    "url": "https://github.com/ambv/retype",
    "description": "Another tool to apply stubs to code."
  },
  {
    "name": "mypy-protobuf",
    "url": "https://github.com/dropbox/mypy-protobuf",
    "description": "Tool to generate mypy stubs from protobufs."
  },
  {
    "name": "mypyc",
    "url": "https://github.com/python/mypy/tree/master/mypyc",
    "description": "Compiles mypy-annotated, statically typed Python modules into CPython C extensions."
  },
  {
    "name": "typing_inspect",
    "url": "https://github.com/ilevkivskyi/typing_inspect",
    "description": "The typing_inspect module defines experimental API for runtime inspection of types defined in the Python standard typing module."
  },
  {
    "name": "typing-json",
    "url": "https://pypi.org/project/typing-json/",
    "description": "Lib for working with typed objects and JSON."
  },
  {
    "name": "com2ann",
    "url": "https://github.com/ilevkivskyi/com2ann",
    "description": "Tool for translation of type comments to type annotations in Python."
  },
  {
    "name": "mypy-silent",
    "url": "https://github.com/whtsky/mypy-silent/",
    "description": "Silence mypy by adding or removing code comments."
  },
  {
    "name": "MonkeyType",
    "url": "https://github.com/instagram/MonkeyType",
    "description": "Collects runtime types of function arguments and return values, and can automatically generate stub files or even add draft type annotations directly to your Python code based on the types collected at runtime."
  },
  {
    "name": "pytest-monkeytype",
    "url": "https://github.com/mariusvniekerk/pytest-monkeytype",
    "description": "MonkeyType plugin for pytest."
  },
  {
    "name": "pyannotate",
    "url": "https://github.com/dropbox/pyannotate",
    "description": "Insert annotations into your source code based on call arguments and return types observed at runtime."
  },
  {
    "name": "pytest-annotate",
    "url": "https://github.com/kensho-technologies/pytest-annotate",
    "description": "Pyannotate plugin for pytest."
  },
  {
    "name": "pyre infer",
    "url": "https://github.com/facebook/pyre-check",
    "description": "Pyre has a powerful feature for migrating codebases to a typed format. The infer command-line option ingests a file or directory, makes educated guesses about the types used, and applies the annotations to the files."
  },
  {
    "name": "pytype annotate-ast",
    "url": "https://github.com/google/pytype/tree/master/pytype/tools/annotate_ast",
    "description": "A work-in-progress tool to annotate the nodes of an AST with their Python types."
  },
  {
    "name": "Typilus",
    "url": "https://github.com/typilus/typilus",
    "description": "A deep learning algorithm for predicting types in Python. Also available as a GitHub action"
  },
  {
    "name": "Type4Py",
    "url": "https://github.com/saltudelft/type4py",
    "description": "Deep Similarity Learning-Based Type Inference for Python."
  },
  {
    "name": "pynamodb-mypy",
    "url": "https://github.com/pynamodb/pynamodb-mypy",
    "description": "Plugin for PynamoDB support."
  },
  {
    "name": "mypy-zope",
    "url": "https://github.com/Shoobx/mypy-zope",
    "description": "Plugin for zope.interface support."
  },
  {
    "name": "mypy/plugins",
    "url": "https://github.com/python/mypy/tree/master/mypy/plugins",
    "description": "Plugins already integrated into mypy."
  },
  {
    "name": "loguru-mypy",
    "url": "https://github.com/kornicameister/loguru-mypy",
    "description": "Plugin for loguru support."
  },
  {
    "name": "mypy-PyCharm-plugin",
    "url": "https://github.com/dropbox/mypy-PyCharm-plugin",
    "description": "Mypy integration for PyCharm."
  },
  {
    "name": "vim-mypy",
    "url": "https://github.com/Integralist/vim-mypy",
    "description": "Mypy integration for Vim."
  },
  {
    "name": "linter-mypy",
    "url": "https://atom.io/packages/linter-mypy",
    "description": "Mypy integration for Atom."
  },
  {
    "name": "emacs-flycheck-mypy",
    "url": "https://github.com/lbolla/emacs-flycheck-mypy",
    "description": "Mypy integration for Emacs."
  },
  {
    "name": "PEP-3107",
    "url": "https://www.python.org/dev/peps/pep-3107",
    "description": "Function Annotations."
  },
  {
    "name": "PEP-482",
    "url": "https://www.python.org/dev/peps/pep-0482/",
    "description": "Literature Overview for Type Hints."
  },
  {
    "name": "PEP-483",
    "url": "https://www.python.org/dev/peps/pep-0483/",
    "description": "The Theory of Type Hints."
  },
  {
    "name": "PEP-484",
    "url": "https://www.python.org/dev/peps/pep-0484/",
    "description": "Type Hints."
  },
  {
    "name": "PEP-526",
    "url": "https://www.python.org/dev/peps/pep-0526/",
    "description": "Syntax for Variable Annotations."
  },
  {
    "name": "PEP-544",
    "url": "https://www.python.org/dev/peps/pep-0544/",
    "description": "Protocols: Structural subtyping (static duck typing)."
  },
  {
    "name": "PEP-557",
    "url": "https://www.python.org/dev/peps/pep-0557/",
    "description": "Data Classes."
  },
  {
    "name": "PEP-560",
    "url": "https://www.python.org/dev/peps/pep-0560/",
    "description": "Core support for typing module and generic types."
  },
  {
    "name": "PEP-561",
    "url": "https://www.python.org/dev/peps/pep-0561/",
    "description": "Distributing and Packaging Type Information."
  },
  {
    "name": "PEP-563",
    "url": "https://www.python.org/dev/peps/pep-0563/",
    "description": "Postponed Evaluation of Annotations."
  },
  {
    "name": "PEP-585",
    "url": "https://www.python.org/dev/peps/pep-0585/",
    "description": "Type Hinting Generics In Standard Collections."
  },
  {
    "name": "PEP-586",
    "url": "https://www.python.org/dev/peps/pep-0586/",
    "description": "Literal Types."
  },
  {
    "name": "PEP-589",
    "url": "https://www.python.org/dev/peps/pep-0589/",
    "description": "TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys."
  },
  {
    "name": "PEP-591",
    "url": "https://www.python.org/dev/peps/pep-0591/",
    "description": "Adding a final qualifier to typing."
  },
  {
    "name": "PEP-593",
    "url": "https://www.python.org/dev/peps/pep-0593/",
    "description": "Flexible function and variable annotations."
  },
  {
    "name": "PEP-604",
    "url": "https://www.python.org/dev/peps/pep-0604/",
    "description": "Complementary syntax for Union[]."
  },
  {
    "name": "PEP-612",
    "url": "https://www.python.org/dev/peps/pep-0612/",
    "description": "Parameter Specification Variables."
  },
  {
    "name": "PEP-613",
    "url": "https://www.python.org/dev/peps/pep-0613/",
    "description": "Explicit Type Aliases."
  },
  {
    "name": "typing",
    "url": "https://docs.python.org/3/library/typing.html",
    "description": "Support for type hints."
  },
  {
    "name": "MyPy docs",
    "url": "https://mypy.readthedocs.io/en/latest/stubs.html",
    "description": "General information about stubs."
  },
  {
    "name": "1-minute guide to real constants in Python",
    "url": "https://sobolevn.me/2018/07/real-python-contants",
    "description": "Full tutorial about Final constants and inheritance."
  },
  {
    "name": "Simple dependent types in Python",
    "url": "https://sobolevn.me/2019/01/simple-dependent-types-in-python",
    "description": "Full tutorial about Literal types."
  },
  {
    "name": "Typechecking Django and DRF",
    "url": "https://sobolevn.me/2019/08/typechecking-django-and-drf",
    "description": "Full tutorial about type-checking django."
  },
  {
    "name": "Testing mypy stubs, plugins, and types",
    "url": "https://sobolevn.me/2019/08/testing-mypy-types",
    "description": "Full tutorial about testing mypy types."
  },
  {
    "name": "The state of type hints in Python",
    "url": "https://bernat.tech/posts/the-state-of-type-hints-in-python/",
    "description": "As of May 2018."
  },
  {
    "name": "PyTest MonkeyType Introduction",
    "url": "https://dev.to/ldrscke/type-annotate-an-existing-python-django-codebase-with-monkeytype-254i",
    "description": "Type Annotate an existing Python Django Codebase with MonkeyType."
  },
  {
    "name": "python/typing",
    "url": "https://gitter.im/python/typing",
    "description": "Official typing gitter chat."
  },
  {
    "name": "TypedDjango",
    "url": "https://gitter.im/mypy-django/Lobby",
    "description": "Official organisation gitter chat."
  },
  {
    "name": "PythonRu#typing",
    "url": "https://python-ru.slack.com",
    "description": "Russian slack chat (invites are here) about types."
  },
  {
    "name": "awesome-python",
    "url": "https://github.com/vinta/awesome-python",
    "description": "Curated list of awesome Python frameworks, libraries, software and resources."
  },
  {
    "name": "python-typecheckers",
    "url": "https://github.com/ethanhs/python-typecheckers",
    "description": "List of Python type checkers: static and runtime."
  }
]
