[
  {
    "name": "PyPi",
    "url": "https://pypi.org/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+Implementation+%3A%3A+MicroPython",
    "description": "This filter shows just the MicroPython libraries on PyPi. Note: You cannot pip install micropython libraries. See MicroPython docs for more information on upip."
  },
  {
    "name": "GitHub Search",
    "url": "https://github.com/search?q=micropython",
    "description": "Search GitHub for repositories containing MicroPython."
  },
  {
    "name": "GitHub Topic",
    "url": "https://github.com/topics/micropython",
    "description": "MicroPython - Browse GitHub Topics for projects tagged with MicroPython."
  },
  {
    "name": "Libraries.io",
    "url": "https://libraries.io/search?q=micropython",
    "description": "Libraries.io query for MicroPython."
  },
  {
    "name": "GitLab Explore",
    "url": "https://gitlab.com/explore?sort=latest_activity_desc&utf8=%E2%9C%93&name=micropython&sort=latest_activity_desc",
    "description": "Explore repositories on GitLab."
  },
  {
    "name": "Codeberg Explore",
    "url": "https://codeberg.org/explore/repos?tab=&sort=recentupdate&q=micropython",
    "description": "Explore repositories on Codeberg."
  },
  {
    "name": "MicroMLP",
    "url": "https://github.com/jczic/MicroMLP",
    "description": "A micro neural network multilayer perceptron for MicroPython (used on ESP32 and Pycom modules)."
  },
  {
    "name": "MicroPython-NeuralNetwork",
    "url": "https://gitlab.com/olivierlenoir/MicroPython-NeuralNetwork",
    "description": "Neural Network for MicroPython."
  },
  {
    "name": "uMath",
    "url": "https://github.com/AaronKel/uMath",
    "description": "Computer Algebra for microcontrollers."
  },
  {
    "name": "micropython-ulab",
    "url": "https://github.com/v923z/micropython-ulab",
    "description": "A numpy-like fast vector module for MicroPython."
  },
  {
    "name": "micropython-fourier",
    "url": "https://github.com/peterhinch/micropython-fourier",
    "description": "Fast Fourier transform in MicroPython's inline ARM assembler."
  },
  {
    "name": "Filters FIR filters using ARM Thumb assembler. Using an online utility you can go from a graph\nof required frequency response to a filter implementation.",
    "url": "https://github.com/peterhinch/micropython-filters"
  },
  {
    "name": "ulinalg",
    "url": "https://github.com/jalawson/ulinalg",
    "description": "Small size matrix handling module with a few linear algebra operations specifically for MicroPython (Python3)."
  },
  {
    "name": "micropython-mtx",
    "url": "https://gitlab.com/nickoala/micropython-mtx",
    "description": "Fast Matrix Multiplication and Linear Solver on MicroPython."
  },
  {
    "name": "micropython-vec",
    "url": "https://gitlab.com/nickoala/micropython-vec",
    "description": "Vector Operations on MicroPython."
  },
  {
    "name": "MicroPython_Statistics",
    "url": "https://github.com/rcolistete/MicroPython_Statistics",
    "description": "Statistics module for MicroPython."
  },
  {
    "name": "MicroPython-Matrix",
    "url": "https://gitlab.com/olivierlenoir/MicroPython-Matrix",
    "description": "MicroPython basic matrix operations."
  },
  {
    "name": "micropython-jq6500",
    "url": "https://github.com/rdagger/micropython-jq6500",
    "description": "Driver for JQ6500 UART MP3 modules."
  },
  {
    "name": "KT403A-MP3",
    "url": "https://github.com/jczic/KT403A-MP3",
    "description": "Driver for KT403A, used by DFPlayer Mini and Grove MP3 v2.0."
  },
  {
    "name": "micropython-buzzer",
    "url": "https://github.com/fruch/micropython-buzzer",
    "description": "Play Nokia compose and mid files on buzzers."
  },
  {
    "name": "micropython-dfplayer",
    "url": "https://github.com/ShrimpingIt/micropython-dfplayer",
    "description": "Driver for DFPlayer Mini using UART."
  },
  {
    "name": "micropython-longwave",
    "url": "https://github.com/MattMatic/micropython-longwave",
    "description": "WAV player for MicroPython board."
  },
  {
    "name": "micropython-vs1053",
    "url": "https://github.com/peterhinch/micropython-vs1053",
    "description": "Asynchronous driver for VS1053b MP3 player."
  },
  {
    "name": "micropython-midi",
    "url": "https://github.com/cjbarnes18/micropython-midi",
    "description": "A midi implementation example for MicroPython."
  },
  {
    "name": "upy-rtttl",
    "url": "https://github.com/dhylands/upy-rtttl",
    "description": "Python Parser for Ring Tone Text Transfer Language (RTTTL)."
  },
  {
    "name": "micropython-i2s-examples",
    "url": "https://github.com/miketeachman/micropython-i2s-examples",
    "description": "Examples for I2S support on microcontrollers that run MicroPython."
  },
  {
    "name": "micropython-osc",
    "url": "https://github.com/SpotlightKid/micropython-osc",
    "description": "A minimal OSC client and server library for MicroPython."
  },
  {
    "name": "micropython-utelegram",
    "url": "https://github.com/jordiprats/micropython-utelegram",
    "description": "Telegram API wrapper for MicroPython."
  },
  {
    "name": "uEagle",
    "url": "https://github.com/jcalbert/uEagle",
    "description": "MicroPython Rainforest EAGLE client."
  },
  {
    "name": "micropython-youtube-api",
    "url": "https://github.com/UnexpectedMaker/micropython-youtube-api",
    "description": "YouTube API in MicroPython."
  },
  {
    "name": "micropython_esp8266_tweetbot",
    "url": "https://github.com/ayoko/micropython_esp8266_tweetbot",
    "description": "Tweet bot for MicroPython v1.8.4 (ESP8266)."
  },
  {
    "name": "telegram-upy",
    "url": "https://github.com/gabrielebarola/telegram-upy",
    "description": "Telegram API wrapper for MicroPython."
  },
  {
    "name": "micropython-thingspeak",
    "url": "https://github.com/radeklat/micropython-thingspeak",
    "description": "Library for sending data to thingspeak.com from IoT devices running MicroPython (such as ESP8266)."
  },
  {
    "name": "micropython_pushbullet",
    "url": "https://github.com/gsampallo/micropython_pushbullet",
    "description": "Simple example of how to use PushBullet with MicroPython on ESP8266."
  },
  {
    "name": "esp32-youtube-display",
    "url": "https://github.com/alvarowolfx/esp32-youtube-display",
    "description": "Display YouTube metrics using Google API and MicroPython."
  },
  {
    "name": "micropython-spotify-web-api",
    "url": "https://github.com/tltx/micropython-spotify-web-api",
    "description": "A library for using Spotify's web API from a IoT device with MicroPython."
  },
  {
    "name": "micropython-firebase-auth",
    "url": "https://github.com/WoolDoughnut310/micropython-firebase-auth",
    "description": "Firebase Auth implementation for MicroPython."
  },
  {
    "name": "PyBoard-HC05-Android",
    "url": "https://github.com/KipCrossing/PyBoard-HC05-Android",
    "description": "Pyboard HC05 Bluetooth adaptor example application."
  },
  {
    "name": "uble",
    "url": "https://github.com/dmazzella/uble",
    "description": "Lightweight Bluetooth Low Energy driver written in pure Python for MicroPython."
  },
  {
    "name": "MicroPythonBLEHID",
    "url": "https://github.com/Heerkog/MicroPythonBLEHID",
    "description": "Human Interface Device (HID) over Bluetooth Low Energy (BLE) GATT library for MicroPython."
  },
  {
    "name": "upyble",
    "url": "https://github.com/Carglglz/upyble",
    "description": "Command line tool for Bluetooth Low Energy MicroPython devices."
  },
  {
    "name": "micropython-xiaomi-ble-adv-parse",
    "url": "https://codeberg.org/scy/micropython-xiaomi-ble-adv-parse",
    "description": "Passively retrieve sensor data from some Xiaomi Bluetooth Low Energy (BLE) sensors."
  },
  {
    "name": "mijia-temphum-upy",
    "url": "https://codeberg.org/scy/mijia-temphum-upy",
    "description": "MicroPython library to read certain Xiaomi Mijia BLE temperature & humidity sensors."
  },
  {
    "name": "micropython-spacecan",
    "url": "https://gitlab.com/alphaaomega/micropython-spacecan",
    "description": "Spacecan is a MicroPython implementation of the SpaceCAN protocol for embedded systems."
  },
  {
    "name": "Robomaster-Micropython",
    "url": "https://github.com/JohnieBraaf/Robomaster-Micropython",
    "description": "Robomaster S1 - MicroPython CAN BUS controller."
  },
  {
    "name": "micropython-mcp2515",
    "url": "https://github.com/jxltom/micropython-mcp2515",
    "description": "MicroPython MCP2515 driver, porting from Arduino MCP2515 CAN interface library."
  },
  {
    "name": "ufastlz",
    "url": "https://github.com/dmazzella/ufastlz",
    "description": "MicroPython wrapper for FastLZ, a lightning-fast lossless compression library."
  },
  {
    "name": "mpyaes",
    "url": "https://github.com/iyassou/mpyaes",
    "description": "MicroPython module for AES encryption."
  },
  {
    "name": "micropython-aes",
    "url": "https://github.com/piaca/micropython-aes",
    "description": "AES algorithm with pure python implementation."
  },
  {
    "name": "ucrypto",
    "url": "https://github.com/dmazzella/ucrypto",
    "description": "MicroPython package for doing fast elliptic curve cryptography, specifically digital signatures. API design inspired from fastecdsa and implementation based on tomsfastmath."
  },
  {
    "name": "ucryptoauthlib",
    "url": "https://github.com/dmazzella/ucryptoauthlib",
    "description": "Lightweight driver for Microchip Crypto Authentication secure elements written in pure python for MicroPython."
  },
  {
    "name": "embit",
    "url": "https://github.com/diybitcoinhardware/embit",
    "description": "A minimal bitcoin library for MicroPython and Python3 with a focus on embedded systems."
  },
  {
    "name": "microotp",
    "url": "https://github.com/gdassori/microotp",
    "description": "A ESP8266 MicroPython OTP Generator."
  },
  {
    "name": "micropython-rsa-signing",
    "url": "https://github.com/artem-smotrakov/micropython-rsa-signing",
    "description": "RSA signing on MicroPython."
  },
  {
    "name": "micropython-cryptomsg",
    "url": "https://github.com/jacklinquan/micropython-cryptomsg",
    "description": "A MicroPython module to encrypt and decrypt messages with AES CBC mode."
  },
  {
    "name": "ICantBelieveItsNotDNS",
    "url": "https://github.com/yschaeff/ICantBelieveItsNotDNS",
    "description": "\"I Can't Believe It's Not DNS!\" (ICBIND) is an authoritative DNS server for the ESP8266 written in MicroPython."
  },
  {
    "name": "MicroDNSSrv",
    "url": "https://github.com/jczic/MicroDNSSrv",
    "description": "A micro DNS server for MicroPython to simply respond to A queries on multi-domains with or without wildcards (used on Pycom modules & ESP32)."
  },
  {
    "name": "tinydns",
    "url": "https://github.com/belyalov/tinydns",
    "description": "Very simple DNS async server for MicroPython."
  },
  {
    "name": "micropython-captiveportal",
    "url": "https://github.com/metachris/micropython-captiveportal",
    "description": " Minimal async captive portal for MicroPython (compatible with uasyncio v3/MicroPython 1.13+ as well as earlier versions)."
  },
  {
    "name": "Micropython-DNSServer-Captive-Portal",
    "url": "https://github.com/p-doyle/Micropython-DNSServer-Captive-Portal",
    "description": "MicroPython WiFi AP Captive Portal with DNS and Web Server."
  },
  {
    "name": "Official wiznet5k",
    "url": "https://github.com/andrewleech/wiznet_ioLibrary_Driver",
    "description": "Driver for the WIZnet5x00 series of Ethernet controllers."
  },
  {
    "name": "micropy-ENC28J60",
    "url": "https://github.com/przemobe/micropy-ENC28J60",
    "description": "ENC28J60 Ethernet chip driver for MicroPython (RP2)."
  },
  {
    "name": "RP2040 Ethernet example",
    "url": "https://github.com/SteveSEK/Raspberry-Pi-Pico-MicroPython-Ethernet",
    "description": "Ethernet driver, example python code and YouTube."
  },
  {
    "name": "micropython-ftplib",
    "url": "https://github.com/SpotlightKid/micropython-ftplib",
    "description": "An FTP client library for MicroPython."
  },
  {
    "name": "FTP-Server-for-ESP8266-ESP32-and-PYBD",
    "url": "https://github.com/robert-hh/FTP-Server-for-ESP8266-ESP32-and-PYBD",
    "description": "Small FTP server for ESP8266/ESP32/PYBD on the MicroPython platform."
  },
  {
    "name": "MicroFTPServer",
    "url": "https://github.com/cpopp/MicroFTPServer",
    "description": "Minimal FTP Server that can run on an ESP8266 with MicroPython."
  },
  {
    "name": "micropython-uaioftp",
    "url": "https://github.com/cwyark/micropython-uaioftp",
    "description": "Lightweight FTP library for MicroPython."
  },
  {
    "name": "micropyGPS",
    "url": "https://github.com/inmcm/micropyGPS",
    "description": "Full featured GPS NMEA sentence parser."
  },
  {
    "name": "micropython-gnssl76l",
    "url": "https://github.com/tuupola/micropython-gnssl76l",
    "description": "MicroPython I2C driver for Quectel GNSS L76-L (GPS)."
  },
  {
    "name": "mpy-agps",
    "url": "https://github.com/pulkin/mpy-agps",
    "description": "MicroPython implementation of assisted location services (AGPS)."
  },
  {
    "name": "Asynchronous GPS driver Receive and parse GPS data as a uasyncio task.",
    "url": "https://github.com/peterhinch/micropython-async/blob/master/v3/docs/GPS.md"
  },
  {
    "name": "micropython-upyphone",
    "url": "https://github.com/jeffmer/micropython-upyphone",
    "description": "A gsm phone using pyboard and sim800l."
  },
  {
    "name": "micropython-sim800",
    "url": "https://github.com/olablt/micropython-sim800",
    "description": "MicroPython driver for sim800."
  },
  {
    "name": "sim800",
    "url": "https://github.com/basanovase/sim800",
    "description": "Library for interfacing with SIM800 module in MicroPython."
  },
  {
    "name": "MicroPython-AM7020",
    "url": "https://github.com/JiekangHuang/MicroPython-AM7020",
    "description": "MicroPython driver for AM7020 Narrowband Internet of Things (NBIoT) module."
  },
  {
    "name": "microhomie",
    "url": "https://github.com/microhomie/microhomie",
    "description": "MicroPython implementation of the Homie MQTT convention for IoT."
  },
  {
    "name": "uPyEcho",
    "url": "https://github.com/lemariva/uPyEcho",
    "description": "Emulated Belkin WeMo device that works with Amazon Echo (Alexa) using MicroPython on an ESP32."
  },
  {
    "name": "SonosRemote",
    "url": "https://github.com/foosel/SonosRemote",
    "description": "A remote for Sonos installations running on an ESP8266 and using Sonos HTTP API."
  },
  {
    "name": "micropython-home-assistant",
    "url": "https://gitlab.com/aapjeisbaas/micropython-home-assistant",
    "description": "MicroPython based scripts to extend you home assistant driven home automation projects."
  },
  {
    "name": "micropython-iot",
    "url": "https://github.com/peterhinch/micropython-iot",
    "description": "An approach to designing IOT applications using ESP8266, ESP32 or Pyboard D endpoints."
  },
  {
    "name": "iot-core-micropython",
    "url": "https://github.com/GoogleCloudPlatform/iot-core-micropython",
    "description": "Use MicroPython to connect to Google Cloud IoT Core."
  },
  {
    "name": "SmartUPy",
    "url": "https://github.com/lemariva/SmartUPy",
    "description": "Controlling \"Tuya-type\" smart power outlets using MicroPython."
  },
  {
    "name": "aws-iot-GET-POST-loop",
    "url": "https://github.com/manningt/aws-iot-GET-POST-loop",
    "description": "MicroPython code which uses the AWS-IOT REST API to GET/POST device state info."
  },
  {
    "name": "sensor-mqtt-homeassistant",
    "url": "https://github.com/DougWilkinson/sensor-mqtt-homeassistant",
    "description": "An esp8266/32 MicroPython based sensor platform for gpio, dht, analog, led and more. Includes remote updates for .py code from web server and MQTT/Homeassistant integration."
  },
  {
    "name": "micropython-necir",
    "url": "https://github.com/MattMatic/micropython-necir",
    "description": "NEC infrared capture for TL1838 IR receiver LEDs."
  },
  {
    "name": "Micropython-IR",
    "url": "https://github.com/designerPing/Micropython-IR",
    "description": "Pyboard infrared remote sniff and replay."
  },
  {
    "name": "micropython_ir",
    "url": "https://github.com/peterhinch/micropython_ir",
    "description": "Nonblocking device drivers to receive from IR remotes and for IR \"blaster\" apps."
  },
  {
    "name": "micropython-amg88xx",
    "url": "https://github.com/peterhinch/micropython-amg88xx",
    "description": "Driver for Grid-EYE thermal infra red array sensor (Adafruit 3538)."
  },
  {
    "name": "micropython-ys-irtm",
    "url": "https://github.com/mcauser/micropython-ys-irtm",
    "description": "MicroPython examples for YS-IRTM 5V NEC Infrared UART transceivers."
  },
  {
    "name": "esp8266_ir",
    "url": "https://github.com/ruoyu0088/esp8266_ir",
    "description": "Control IR signal by websocket."
  },
  {
    "name": "micropython_espX_IR_Transceiver",
    "url": "https://github.com/gamefunc/micropython_espX_IR_Transceiver",
    "description": "MicroPython esp32 IR Transceiver."
  },
  {
    "name": "pico-ir",
    "url": "https://github.com/bartoszadamczyk/pico-ir",
    "description": "IR library for Raspberry Pi Pico."
  },
  {
    "name": "uPyLoRaWAN",
    "url": "https://github.com/lemariva/uPyLoRaWAN",
    "description": "ESP32 using MicroPython meets LoRa and LoRaWAN."
  },
  {
    "name": "SX127x_driver_for_MicroPython_on_ESP8266",
    "url": "https://github.com/Wei1234c/SX127x_driver_for_MicroPython_on_ESP8266",
    "description": "SX127x (LoRa transceiver) driver for (Micro)Python on ESP8266/ESP32/Raspberry_Pi."
  },
  {
    "name": "LightLora_MicroPython",
    "url": "https://github.com/MZachmann/LightLora_MicroPython",
    "description": "Lightweight Interrupt-driven Semtech SX127x Library for MicroPython."
  },
  {
    "name": "u-lora",
    "url": "https://github.com/martynwheeler/u-lora",
    "description": "Raspi-lora for MicroPython."
  },
  {
    "name": "sx127x_esp",
    "url": "https://github.com/azorg/sx127x_esp",
    "description": "Connect Ra-01 module base on LoRaTM sx127x chip to ESP8266/ESP32 under MicroPython."
  },
  {
    "name": "nanoserver",
    "url": "https://github.com/gradoj/nanoserver",
    "description": "MicroPython embedded LoRaWAN server."
  },
  {
    "name": "micropySX126X",
    "url": "https://github.com/ehong-tl/micropySX126X",
    "description": "Semtech SX126X LoRa driver for MicroPython and CircuitPython."
  },
  {
    "name": "micropython-mdns",
    "url": "https://github.com/cbrand/micropython-mdns",
    "description": "A pure python implementation of MDNS with support for Service Discovery."
  },
  {
    "name": "micropython-modbus",
    "url": "https://gitlab.com/extel-open-source/micropython-modbus",
    "description": "MicroPython port of modbus-tk."
  },
  {
    "name": "micropython-modbus",
    "url": "https://github.com/techbase123/micropython-modbus",
    "description": "Modbus Master library for MicroPython ESP32 devices. Based on pycom-modbus from pycom."
  },
  {
    "name": "mp_modbus",
    "url": "https://github.com/eydam-prototyping/mp_modbus",
    "description": "Modbus Lib for MicroPython."
  },
  {
    "name": "micropython-modbus",
    "url": "https://github.com/brainelectronics/micropython-modbus",
    "description": "ModBus TCP and RTU library supporting client and host mode. Based on pycom-modbus from pycom."
  },
  {
    "name": "micropython-mqtt",
    "url": "https://github.com/peterhinch/micropython-mqtt",
    "description": "A 'resilient' asynchronous MQTT driver. Plus a means of using an ESP8266 to bring MQTT to non-networked targets."
  },
  {
    "name": "MQBoard",
    "url": "https://github.com/tve/mqboard",
    "description": "A micro-framework for using MQTT with asyncio on MicroPython boards, primarily on the ESP32."
  },
  {
    "name": "pysmartnode",
    "url": "https://github.com/kevinkk525/pysmartnode",
    "description": " MicroPython Smarthome framework."
  },
  {
    "name": "umqtt_aws_iot",
    "url": "https://github.com/juwul/umqtt_aws_iot",
    "description": "Publish UMQTT messages with MicroPython to AWS IoT."
  },
  {
    "name": "sonoff-mqtt by davea",
    "url": "https://github.com/davea/sonoff-mqtt",
    "description": "MicroPython scripts to control Sonoff/ESP8266 using MQTT."
  },
  {
    "name": "micropython-sonoff-switch",
    "url": "https://github.com/kfricke/micropython-sonoff-switch",
    "description": "Implements a MQTT controllable switch for the iTead Sonoff Switch using MicroPython."
  },
  {
    "name": "micropython-thingspeak-mqtt-esp8266",
    "url": "https://github.com/miketeachman/micropython-thingspeak-mqtt-esp8266",
    "description": "Publish and Subscribe to Thingspeak using MQTT with MicroPython running on ESP8266/ESP32 platforms."
  },
  {
    "name": "uMQTT",
    "url": "https://github.com/andrewmk/uMQTT",
    "description": "MQTT publish for MicroPython on the WiPy board."
  },
  {
    "name": "micropython-mqtt",
    "url": "https://github.com/chrismoorhouse/micropython-mqtt",
    "description": "Async MQTT library with auto reconnect for MicroPython devices such as the ESP32 or Pycom devices."
  },
  {
    "name": "micropython-adafruit-mqtt-esp8266",
    "url": "https://github.com/miketeachman/micropython-adafruit-mqtt-esp8266",
    "description": "Using MQTT to Publish/Subscribe to adafruit io. MicroPython/CircuitPython implementation on ESP8266/ESP32."
  },
  {
    "name": "MicropythonCayenneMQTTClient",
    "url": "https://github.com/uraich/MicropythonCayenneMQTTClient",
    "description": "A port of the Python Cayenne MQTT Client to MicroPython."
  },
  {
    "name": "mqtt_upython",
    "url": "https://github.com/matbgn/mqtt_upython",
    "description": "MQTT Client using MicroPython on ESP8266."
  },
  {
    "name": "micropython-nfc",
    "url": "https://github.com/rolandvs/micropython-nfc",
    "description": "Using NFC with MicroPython."
  },
  {
    "name": "micropython_pn532",
    "url": "https://github.com/luiz-brandao/micropython_pn532",
    "description": "Driver for PN532 NFC/RFID breakout boards based on Adafruit CircuitPython (UART)."
  },
  {
    "name": "NFC_PN532_SPI",
    "url": "https://github.com/Carglglz/NFC_PN532_SPI",
    "description": "Partial Port of Adafruit CircuitPython to MicroPython of PN532 NFC/RFID control library (SPI)."
  },
  {
    "name": "esp8266_ntp_webserver",
    "url": "https://github.com/Roterfux/esp8266_ntp_webserver",
    "description": "MicroPython + esp8266 + ntp + webserver."
  },
  {
    "name": "micropython-ntpd",
    "url": "https://github.com/dave2/micropython-ntpd",
    "description": "An implementation of an ntpd in MicroPython."
  },
  {
    "name": "micropython_ntpserver",
    "url": "https://github.com/GrantGMiller/micropython_ntpserver",
    "description": "An NTP server written for MicroPython."
  },
  {
    "name": "micropython-ntpclient",
    "url": "https://github.com/wieck/micropython-ntpclient",
    "description": "NTP client for MicroPython using uasyncio."
  },
  {
    "name": "Official OneWire",
    "url": "https://github.com/micropython/micropython/tree/master/drivers/onewire",
    "description": "For devices using the OneWire bus, eg Dallas ds18x20."
  },
  {
    "name": "Onewire_DS18X20",
    "url": "https://github.com/robert-hh/Onewire_DS18X20",
    "description": "Classes for driving the DS18x20 sensor with the onewire protocol for Pycom MicroPython."
  },
  {
    "name": "eiscp-micropython",
    "url": "https://github.com/cbrand/eiscp-micropython",
    "description": "MicroPython port for the Onkyo-EISCP protocol used, among others, by Pioneer."
  },
  {
    "name": "micropython-ota-updater",
    "url": "https://github.com/rdehuyss/micropython-ota-updater",
    "description": "OTA Updater for MicroPython."
  },
  {
    "name": "Micropython-ESP32-OTA",
    "url": "https://github.com/AkhileshThorat/Micropython-ESP32-OTA",
    "description": "MicroPython updater based on rdehuyss/micropython-ota-updater."
  },
  {
    "name": "senko",
    "url": "https://github.com/RangerDigital/senko",
    "description": "Simplest OTA update solution for your MicroPython projects."
  },
  {
    "name": "micropython-radio",
    "url": "https://github.com/peterhinch/micropython-radio",
    "description": "Protocols for nRF24L01 2.4Ghz radio modules."
  },
  {
    "name": "micropython-rfsocket",
    "url": "https://github.com/wuub/micropython-rfsocket",
    "description": "MicroPython implementation of popular 433MHzn based RFSockets."
  },
  {
    "name": "Official nRF24L01",
    "url": "https://github.com/micropython/micropython/tree/master/drivers/nrf24l01",
    "description": "Official driver for nRF24L01 2.4Ghz radio modules."
  },
  {
    "name": "micropython_remote",
    "url": "https://github.com/peterhinch/micropython_remote",
    "description": "Capture and replay 433MHz remote control codes. Control remote switched power adaptors."
  },
  {
    "name": "micropython-ys-rf34t",
    "url": "https://github.com/mcauser/micropython-ys-rf34t",
    "description": "MicroPython examples using YS-RF34T 433MHz ASK/OOK UART transceivers."
  },
  {
    "name": "FM_Talkie",
    "url": "https://github.com/Wei1234c/FM_Talkie",
    "description": "FM Walkie Talkie using RDA5820N."
  },
  {
    "name": "micropython-TEA5767",
    "url": "https://github.com/alankrantas/micropython-TEA5767",
    "description": "MicroPython ESP8266/ESP32 driver for TEA5767 FM radio module."
  },
  {
    "name": "micropython-ppm-decoder",
    "url": "https://github.com/dastultz/micropython-ppm-decoder",
    "description": "Utility for decoding an R/C receiver PPM frame signal."
  },
  {
    "name": "ESP32-433Mhz-Receiver-and-Tools",
    "url": "https://github.com/Aschhoff/ESP32-433Mhz-Receiver-and-Tools",
    "description": "ESP32 433Mhz Receiver written in MicroPython and Tools for Windows."
  },
  {
    "name": "webrepl",
    "url": "https://micropython.org/webrepl",
    "description": "MicroPython WebREPL."
  },
  {
    "name": "zepl",
    "url": "https://gitlab.com/zepl1/zepl",
    "description": "MicroPython WebREPL Console Application using ZeroMQ."
  },
  {
    "name": "jupyter_micropython_remote",
    "url": "https://gitlab.com/alelec/jupyter_micropython_remote",
    "description": "Jupyter kernel to directly execute code on a MicroPython board over the serial/web REPL."
  },
  {
    "name": "FBConsole",
    "url": "https://github.com/boochow/FBConsole",
    "description": "Frame buffer console class for MicroPython."
  },
  {
    "name": "micropython-mfrc522",
    "url": "https://github.com/wendlers/micropython-mfrc522",
    "description": "Driver for NXP MFRC522 RFID reader/writer."
  },
  {
    "name": "micropython-wiegand",
    "url": "https://github.com/pjz/micropython-wiegand",
    "description": "Wiegand protocol reader."
  },
  {
    "name": "urdm6300",
    "url": "https://github.com/membermatters/urdm6300",
    "description": "A MicroPython driver for the popular RDM6300 RFID card reader."
  },
  {
    "name": "micropython-tinyrtc-i2c",
    "url": "https://github.com/mcauser/micropython-tinyrtc-i2c",
    "description": "Driver for DS1307 RTC and AT24C32N EEPROM."
  },
  {
    "name": "Micropython_TinyRTC",
    "url": "https://github.com/AnthonyKNorman/Micropython_TinyRTC",
    "description": "Driver for DS1307 RTC."
  },
  {
    "name": "micropython-mcp7940",
    "url": "https://github.com/mattytrentini/micropython-mcp7940",
    "description": "Driver for the Microchip MCP7940 RTC."
  },
  {
    "name": "micropython-ds1302-rtc",
    "url": "https://github.com/omarbenhamid/micropython-ds1302-rtc",
    "description": "DS1302 RTC Clock driver for MicroPython."
  },
  {
    "name": "DS3231micro",
    "url": "https://github.com/notUnique/DS3231micro",
    "description": "MicroPython library for DS3231."
  },
  {
    "name": "mpy-miniterm",
    "url": "https://github.com/jeffmakes/mpy-miniterm",
    "description": "Tool for seamless serial debug and file synchronisation with MicroPython devices via the serial REPL."
  },
  {
    "name": "MicroPython-MorseCode",
    "url": "https://gitlab.com/olivierlenoir/MicroPython-MorseCode",
    "description": "International Morse Code using a micro-controller with MicroPython."
  },
  {
    "name": "I2C Slave",
    "url": "https://github.com/peterhinch/micropython-async/blob/master/v3/docs/I2C.md",
    "description": "Uses the Pyboard's I2C slave mode to implement a full duplex asynchronous link. Principal use case is for ESP8266 which has only one UART."
  },
  {
    "name": "micropython-msgpack",
    "url": "https://github.com/peterhinch/micropython-msgpack",
    "description": "MessagePack serialisation library optimised for MicroPython."
  },
  {
    "name": "micropython-uprotobuf",
    "url": "https://github.com/jazzycamel/micropython-uprotobuf",
    "description": "A lightweight implementation of Google's Protocol Buffers (protobuf) for MicroPython."
  },
  {
    "name": "minipb",
    "url": "https://github.com/dogtopus/minipb",
    "description": "Mini Protobuf {de}serializer in pure Python."
  },
  {
    "name": "micropython-socks",
    "url": "https://github.com/kost/micropython-socks",
    "description": "MicroPython library implementing SOCKS server."
  },
  {
    "name": "uMail",
    "url": "https://github.com/shawwwn/uMail",
    "description": "A lightweight, scalable SMTP client for sending email in MicroPython."
  },
  {
    "name": "us2n",
    "url": "https://github.com/tiagocoutinho/us2n",
    "description": "MicroPython bridge between UART and TCP for the ESP32."
  },
  {
    "name": "MicroTelnetServer",
    "url": "https://github.com/cpopp/MicroTelnetServer",
    "description": "Simple telnet server for MicroPython and the ESP8266 allowing telnet clients access to the REPL."
  },
  {
    "name": "uPyVoip",
    "url": "https://github.com/RetepRelleum/uPyVoip",
    "description": "Voip for MicroPython ESP32 with Interactive Voice Response."
  },
  {
    "name": "HueBridge",
    "url": "https://github.com/FRC4564/HueBridge",
    "description": "Philips Hue Bridge."
  },
  {
    "name": "micropython-wifimanager",
    "url": "https://github.com/mitchins/micropython-wifimanager",
    "description": "A simple network configuration utility for MicroPython on the ESP8266 board."
  },
  {
    "name": "WiFiManager",
    "url": "https://github.com/tayfunulu/WiFiManager",
    "description": "WiFi manager for ESP8266 - ESP12 - ESP32 - MicroPython."
  },
  {
    "name": "Micropython-ESP-WiFi-Manager",
    "url": "https://github.com/brainelectronics/Micropython-ESP-WiFi-Manager",
    "description": "WiFi Manager to configure and connect to networks."
  },
  {
    "name": "MicroWebSrv",
    "url": "https://github.com/jczic/MicroWebSrv",
    "description": "A micro HTTP Web server that supports WebSockets, html/python language templating and routing handlers, for MicroPython (used on Pycom modules & ESP32)."
  },
  {
    "name": "MicroWebSrv2",
    "url": "https://github.com/jczic/MicroWebSrv2",
    "description": "The last Micro Web Server for IoTs (MicroPython) or large servers (CPython), that supports WebSockets, routes, template engine and with really optimized architecture (mem allocations, async I/Os)."
  },
  {
    "name": "tinyweb",
    "url": "https://github.com/belyalov/tinyweb",
    "description": "Simple and lightweight HTTP async server for MicroPython."
  },
  {
    "name": "upy-websocket-server",
    "url": "https://github.com/BetaRavener/upy-websocket-server",
    "description": "MicroPython (ESP8266) websocket server implementation."
  },
  {
    "name": "micropython-captive-portal",
    "url": "https://github.com/amora-labs/micropython-captive-portal",
    "description": "A captive portal demo for MicroPython."
  },
  {
    "name": "uPyPortal",
    "url": "https://github.com/lemariva/uPyPortal",
    "description": "A captive portal for MicroPython using ESP32 (WeMos)."
  },
  {
    "name": "ESP8266WebServer",
    "url": "https://github.com/codemee/ESP8266WebServer",
    "description": "ESP8266 web server for MicroPython."
  },
  {
    "name": "microCoAPy",
    "url": "https://github.com/insighio/microCoAPy",
    "description": "A mini client/server implementation of CoAP (Constrained Application Protocol) into MicroPython."
  },
  {
    "name": "micropyserver",
    "url": "https://github.com/troublegum/micropyserver",
    "description": "MicroPyServer is a simple HTTP server for MicroPython projects."
  },
  {
    "name": "MicroRESTCli",
    "url": "https://github.com/jczic/MicroRESTCli",
    "description": "A micro JSON REST Web client based on MicroWebCli for MicroPython (used on Pycom modules & ESP32)."
  },
  {
    "name": "micropython-noggin",
    "url": "https://github.com/larsks/micropython-noggin",
    "description": "A very simple web server for MicroPython."
  },
  {
    "name": "uwebsockets",
    "url": "https://github.com/danni/uwebsockets",
    "description": "MicroPython websockets implementation for ESP8266."
  },
  {
    "name": "microdot",
    "url": "https://github.com/miguelgrinberg/microdot",
    "description": "The impossibly small web framework for MicroPython."
  },
  {
    "name": "micropython-nanoweb",
    "url": "https://github.com/hugokernel/micropython-nanoweb",
    "description": "Full async MicroPython web server with small memory footprint."
  },
  {
    "name": "MicroWebCli",
    "url": "https://github.com/jczic/MicroWebCli",
    "description": "A micro HTTP Web client for MicroPython (used on Pycom modules & ESP32)."
  },
  {
    "name": "micropython-configserver",
    "url": "https://github.com/carstenblt/micropython-configserver",
    "description": "Captive portal for MicroPython including a dumb DNS server and a webserver to configure wifi networks."
  },
  {
    "name": "micropython-aioweb",
    "url": "https://github.com/wybiral/micropython-aioweb",
    "description": "A minimalist asyncio web framework for MicroPython."
  },
  {
    "name": "ZbPy",
    "url": "https://github.com/osresearch/ZbPy",
    "description": "MicroPython IEEE802.15.4 / Zigbee parser."
  },
  {
    "name": "micropython-ili9341",
    "url": "https://github.com/mcauser/deshipu-micropython-ili9341",
    "description": "SSD1606 active matrix epaper display 128x180."
  },
  {
    "name": "micropython-waveshare-epaper",
    "url": "https://github.com/mcauser/micropython-waveshare-epaper",
    "description": "Drivers for various Waveshare e-paper modules."
  },
  {
    "name": "micropython-waveshare-epd",
    "url": "https://github.com/ayoy/micropython-waveshare-epd",
    "description": "Waveshare E-Paper Display driver for devices running Pycom-flavored MicroPython."
  },
  {
    "name": "ssd1675a",
    "url": "https://github.com/mattytrentini/ssd1675a",
    "description": "Driver for SSD1675 based E-Paper displays."
  },
  {
    "name": "Inkplate-micropython",
    "url": "https://github.com/e-radionicacom/Inkplate-micropython",
    "description": "MicroPython driver for Inkplate boards."
  },
  {
    "name": "micropython-inkplate6",
    "url": "https://github.com/tve/micropython-inkplate6",
    "description": "MicroPython driver for the Inkplate 6."
  },
  {
    "name": "eInk-micropython",
    "url": "https://github.com/dhallgb/eInk-micropython",
    "description": "E-Ink library for Waveshare 4.3inch device on MicroPython."
  },
  {
    "name": "eink",
    "url": "https://github.com/chevdor/eink",
    "description": "E-Ink, E-Paper display driver for MicroPython and ESP32."
  },
  {
    "name": "micropython_DEPG0213BN",
    "url": "https://github.com/Inqbus/micropython_DEPG0213BN",
    "description": "Pure MicroPython driver for the DEPG0213BN E-Ink display found on the TTGO T5 V2.3 ESP32 boards."
  },
  {
    "name": "micropython-font-to-py",
    "url": "https://github.com/peterhinch/micropython-font-to-py",
    "description": "A Python 3 utility to convert fonts to Python source capable of being frozen as bytecode."
  },
  {
    "name": "writer A simple way to render above Python fonts to displays whose driver is subclassed from framebuf.",
    "url": "https://github.com/peterhinch/micropython-font-to-py/blob/master/writer/WRITER.md"
  },
  {
    "name": "ssd1306big",
    "url": "https://github.com/nickpmulder/ssd1306big",
    "description": "A font for MicroPython on 128x64 pixel ssd1306 oled display."
  },
  {
    "name": "micropython-stage",
    "url": "https://github.com/python-ugame/micropython-stage",
    "description": "A MicroPython port of the Stage game library."
  },
  {
    "name": "micropython-png",
    "url": "https://github.com/Ratfink/micropython-png",
    "description": "Derivative of PyPNG for use with MicroPython."
  },
  {
    "name": "mpy-img-decoder",
    "url": "https://github.com/remixer-dec/mpy-img-decoder",
    "description": "PNG and JPEG decoder / parser / renderer in pure MicroPython."
  },
  {
    "name": "micropython-oled-progressbars",
    "url": "https://github.com/follower46/micropython-oled-progressbars",
    "description": "A collection of progress bars for use with esp8266 and esp32's on OLED displays."
  },
  {
    "name": "microplot",
    "url": "https://github.com/romilly/microplot",
    "description": "Simple MicroPython plotting package."
  },
  {
    "name": "lvgl",
    "url": "https://github.com/lvgl/lv_binding_micropython",
    "description": "An object oriented component based high-level GUI library with MicroPython binding."
  },
  {
    "name": "micropython-lcd160cr-gui",
    "url": "https://github.com/peterhinch/micropython-lcd160cr-gui",
    "description": "Simple touch driven event based GUI for the Pyboard and LCD160CR colour display."
  },
  {
    "name": "micropython_ra8875",
    "url": "https://github.com/peterhinch/micropython_ra8875",
    "description": "MicroPython device driver and nano-GUI for RA8875 based displays."
  },
  {
    "name": "micropython-nano-gui",
    "url": "https://github.com/peterhinch/micropython-nano-gui",
    "description": "A tiny display-only GUI with a limited set of GUI objects (widgets) for displays whose display driver is subclassed from the framebuf class. With drivers for TFT, ePaper and OLED displays."
  },
  {
    "name": "micro-gui Derived from nano-gui and supporting the same displays and hosts, this provides for user\ninput via pushbuttons or a navigation joystick and an optional rotary encoder.",
    "url": "https://github.com/peterhinch/micropython-micro-gui"
  },
  {
    "name": "TFT-GUI A fast touch GUI for large displays based on SSD1963 controller with XPT2046 touch controller.",
    "url": "https://github.com/peterhinch/micropython-tft-gui"
  },
  {
    "name": "micropython-nextion",
    "url": "https://github.com/brainelectronics/micropython-nextion",
    "description": "Control Nextion displays using MicroPython."
  },
  {
    "name": "Grove_RGB_LCD",
    "url": "https://github.com/dda/MicroPython/blob/master/Grove_RGB_LCD.py",
    "description": "Driver for SeeedStudio's Grove RGB LCD."
  },
  {
    "name": "lcdi2c",
    "url": "https://github.com/slothyrulez/lcdi2c",
    "description": "Driver for HD44780 compatible dot matrix LCDs."
  },
  {
    "name": "micropython-charlcd",
    "url": "https://github.com/rdagger/micropython-charlcd",
    "description": "Driver for HD44780 compatible LCDs."
  },
  {
    "name": "micropython-i2c-lcd",
    "url": "https://github.com/Bucknalla/micropython-i2c-lcd",
    "description": "Driver for I2C 2x16 LCD Screens."
  },
  {
    "name": "pyboard-LCD-character-display",
    "url": "https://github.com/scitoast/pyboard-LCD-character-display",
    "description": "PyBoard driver for HDD44780 compatible 1602 LCDs."
  },
  {
    "name": "python_lcd",
    "url": "https://github.com/dhylands/python_lcd",
    "description": "Driver for HD44780 compatible dot matrix LCDs."
  },
  {
    "name": "micropython-lcd",
    "url": "https://github.com/wjdp/micropython-lcd",
    "description": "Class for controlling the HD44780 from a MicroPython pyboard."
  },
  {
    "name": "HD44780-lcd-upy",
    "url": "https://gitlab.com/rafalosa/HD44780-lcd-upy",
    "description": "MicroPython module for controlling a generic HD44780 LCD."
  },
  {
    "name": "LCM1602-14_LCD_Library",
    "url": "https://github.com/Bhavithiran97/LCM1602-14_LCD_Library",
    "description": "driver for AIP31068L 3.3 V I2C and SPI 1602 Serial Character LCDs."
  },
  {
    "name": "micropython-lcd-AQM1248A",
    "url": "https://github.com/forester3/micropython-lcd-AQM1248A",
    "description": "ESP8266 driver for AQM1248A graphic LCD."
  },
  {
    "name": "micropython-pcd8544",
    "url": "https://github.com/mcauser/micropython-pcd8544",
    "description": "Driver for Nokia 5110 PCD8544 84x48 LCD modules."
  },
  {
    "name": "micropython-st7565",
    "url": "https://github.com/nquest/micropython-st7565",
    "description": "Driver for ST7565 128x64 LCDs."
  },
  {
    "name": "micropython-st7920",
    "url": "https://github.com/ShrimpingIt/micropython-st7920",
    "description": "Library for simple graphic primitives on ST7920 128x64 monochrome LCD panel using ESP8266 and SPI."
  },
  {
    "name": "MicroPython_PCD8544",
    "url": "https://github.com/AnthonyKNorman/MicroPython_PCD8544",
    "description": "ESP8266 driver for Nokia 5110 PCD8544."
  },
  {
    "name": "Official LCD160CR",
    "url": "https://github.com/micropython/micropython/tree/master/drivers/display",
    "description": "Driver for official MicroPython LCD160CR display with resistive touch sensor."
  },
  {
    "name": "micropython-hx1230",
    "url": "https://github.com/mcauser/micropython-hx1230",
    "description": "MicroPython library for HX1230 96x68 LCD modules."
  },
  {
    "name": "micropython-SHARP_Memory_Display",
    "url": "https://github.com/pramasoul/micropython-SHARP_Memory_Display",
    "description": "MicroPython driver for SHARP memory display."
  },
  {
    "name": "micropython-ili9341",
    "url": "https://github.com/mcauser/deshipu-micropython-ili9341",
    "description": "Collection of drivers for TFT displays, ILI9341, SH1106, SSD1606, ST7735."
  },
  {
    "name": "micropython-ili934x",
    "url": "https://github.com/tuupola/micropython-ili934x",
    "description": "SPI driver for ILI934X series based TFT / LCD displays."
  },
  {
    "name": "MicroPython-ST7735",
    "url": "https://github.com/boochow/MicroPython-ST7735",
    "description": "ESP32 version of GuyCarvers's ST7735 TFT LCD driver."
  },
  {
    "name": "micropython-st7735",
    "url": "https://github.com/hosaka/micropython-st7735",
    "description": "Driver for ST7735 TFT LCDs."
  },
  {
    "name": "MicroPython_ST7735",
    "url": "https://github.com/AnthonyKNorman/MicroPython_ST7735",
    "description": "Driver for ST7735 128x128 TFT."
  },
  {
    "name": "SSD1963-TFT-Library-for-PyBoard-and-RP2040",
    "url": "https://github.com/robert-hh/SSD1963-TFT-Library-for-PyBoard-and-RP2040",
    "description": "SSD1963 TFT Library for PyBoard and Raspberry Pi PICO."
  },
  {
    "name": "ST7735",
    "url": "https://github.com/GuyCarver/MicroPython/blob/master/lib/ST7735.py",
    "description": "Driver for ST7735 TFT LCDs."
  },
  {
    "name": "micropython-ili9341",
    "url": "https://github.com/rdagger/micropython-ili9341",
    "description": "MicroPython ILI9341 display & XPT2046 touch screen driver."
  },
  {
    "name": "st7789_mpy",
    "url": "https://github.com/devbis/st7789_mpy",
    "description": "Fast pure-C driver for MicroPython that can handle display modules on ST7789 chip."
  },
  {
    "name": "st7789py_mpy",
    "url": "https://github.com/devbis/st7789py_mpy",
    "description": "Slow MicroPython driver for 240x240 ST7789 display without CS pin from Ali Express, written in MicroPython."
  },
  {
    "name": "micropython-ili9341",
    "url": "https://github.com/jeffmer/micropython-ili9341",
    "description": "MicroPython Driver for ILI9341 display."
  },
  {
    "name": "micropython-ili9341",
    "url": "https://github.com/tkurbad/micropython-ili9341",
    "description": "ILI9341 TFT driver for MicroPython on ESP32."
  },
  {
    "name": "st7789_mpy",
    "url": "https://github.com/russhughes/st7789_mpy",
    "description": "Fast MicroPython driver for ST7789 display module written in C."
  },
  {
    "name": "st7789py_mpy",
    "url": "https://github.com/russhughes/st7789py_mpy",
    "description": "Driver for 320x240, 240x240 and 135x240 ST7789 displays written in MicroPython."
  },
  {
    "name": "ili9342c_mpy",
    "url": "https://github.com/russhughes/ili9342c_mpy",
    "description": "ILI9342C Fast 'C' Driver for MicroPython (M5Stack Core)."
  },
  {
    "name": "gc9a01py",
    "url": "https://github.com/russhughes/gc9a01py",
    "description": "GC9A01 Display driver in MicroPython."
  },
  {
    "name": "gc9a01_mpy",
    "url": "https://github.com/russhughes/gc9a01_mpy",
    "description": "Fast MicroPython driver for GC9A01 display modules written in C."
  },
  {
    "name": "st7735-esp8266-micropython",
    "url": "https://github.com/cheungbx/st7735-esp8266-micropython",
    "description": "An ESP8266 MicroPython library for st7735 160x80, 128x128, 128x160 TFT LCD displays."
  },
  {
    "name": "TTGO-ST7789-MicroPython",
    "url": "https://github.com/schumixmd/TTGO-ST7789-MicroPython",
    "description": "MicroPython ST7789 display driver for TTGO T-Display ESP32 CP2104 WiFi Bluetooth Module 1.14 Inch LCD."
  },
  {
    "name": "st7735_micropython",
    "url": "https://github.com/cheungbx/st7735_micropython",
    "description": "ST7735 MicroPython drivers for 80x160, 128x128, 128x160 for ESP8266."
  },
  {
    "name": "ili934x-micropython",
    "url": "https://gitlab.com/mhepp63/ili934x-micropython",
    "description": "Library for using ILI9341 display drivers with MicroPython."
  },
  {
    "name": "micropython-st7735-esp8266",
    "url": "https://gitlab.com/mo_krauti/micropython-st7735-esp8266",
    "description": "MicroPython driver for ST7735 TFT displays on the esp8266."
  },
  {
    "name": "micropython-ht1632c",
    "url": "https://github.com/vrialland/micropython-ht1632c",
    "description": "Driver for HT1632C 32x16 bicolor led matrix."
  },
  {
    "name": "micropython-matrix8x8",
    "url": "https://github.com/JanBednarik/micropython-matrix8x8",
    "description": "Driver for AdaFruit 8x8 LED Matrix display with HT16K33 backpack."
  },
  {
    "name": "micropython-max7219",
    "url": "https://github.com/mcauser/micropython-max7219",
    "description": "Driver for MAX7219 8x8 LED matrix modules."
  },
  {
    "name": "micropython-wemos-led-matrix-shield",
    "url": "https://github.com/mactijn/micropython-wemos-led-matrix-shield",
    "description": "Driver for Wemos D1 Mini Matrix LED shield, using TM1640 chip."
  },
  {
    "name": "micropython-wemos-led-matrix",
    "url": "https://github.com/mattytrentini/micropython-wemos-led-matrix",
    "description": "Driver for Wemos D1 Mini Matrix LED shield, using TM1640 chip."
  },
  {
    "name": "micropython-max7219",
    "url": "https://github.com/vrialland/micropython-max7219",
    "description": "MicroPython driver for MAX7219 8x8 LED matrix."
  },
  {
    "name": "LKM1638",
    "url": "https://github.com/arikb/LKM1638",
    "description": "Driver for JY-LKM1638 displays based on TM1638 controller."
  },
  {
    "name": "max7219_8digit",
    "url": "https://github.com/pdwerryhouse/max7219_8digit",
    "description": "Driver for MAX7219 8-digit 7-segment LED modules."
  },
  {
    "name": "micropython-max7219",
    "url": "https://github.com/JulienBacquart/micropython-max7219",
    "description": "Driver for MAX7219 8-digit 7-segment LED modules."
  },
  {
    "name": "micropython-my9221",
    "url": "https://github.com/mcauser/micropython-my9221",
    "description": "Driver for MY9221 10-segment LED bar graph modules."
  },
  {
    "name": "micropython-tm1637",
    "url": "https://github.com/mcauser/micropython-tm1637",
    "description": "Driver for TM1637 quad 7-segment LED modules."
  },
  {
    "name": "micropython-tm1638",
    "url": "https://github.com/mcauser/micropython-tm1638",
    "description": "Driver for TM1638 dual quad 7-segment LED modules with switches."
  },
  {
    "name": "micropython-tm1640",
    "url": "https://github.com/mcauser/micropython-tm1640",
    "description": "Driver for TM1740 8x8 LED matrix modules."
  },
  {
    "name": "micropython-tm1640",
    "url": "https://gitlab.com/robhamerling/micropython-tm1640",
    "description": "MicroPython Library for 16 digits 7-segment displays controlled by a TM1640."
  },
  {
    "name": "TM74HC595",
    "url": "https://github.com/Sakartu/TM74HC595",
    "description": "Driver for shift register controlled 5 pin display modules."
  },
  {
    "name": "micropython-morsecode",
    "url": "https://github.com/mampersat/micropython-morsecode",
    "description": "Blink an LED with morse coded message."
  },
  {
    "name": "micropython-p9813",
    "url": "https://github.com/mcauser/micropython-p9813",
    "description": "Driver for P9813 RGB LED used in SeeedStudio's Grove Chainable RGB LED."
  },
  {
    "name": "micropython-ws2812-7seg",
    "url": "https://github.com/HubertD/micropython-ws2812-7seg",
    "description": "7-segment display using WS2812 RGB LEDs."
  },
  {
    "name": "micropython-ws2812",
    "url": "https://github.com/JanBednarik/micropython-ws2812",
    "description": "Driver for WS2812 RGB LEDs."
  },
  {
    "name": "Official APA102",
    "url": "https://docs.micropython.org/en/latest/esp8266/quickref.html#apa102-driver",
    "description": "ESP8266 APA102/DotStar RGB LED driver."
  },
  {
    "name": "Official WS2811",
    "url": "https://docs.micropython.org/en/latest/esp8266/quickref.html#neopixel-driver",
    "description": "ESP8266 WS2811/NeoPixel RGB LED driver."
  },
  {
    "name": "tlc5940-micropython",
    "url": "https://github.com/oysols/tlc5940-micropython",
    "description": "Driver for TLC5940 16 channel LED driver."
  },
  {
    "name": "ws2812-SPI",
    "url": "https://github.com/nickovs/ws2812-SPI",
    "description": "An efficient MicroPython WS2812 (NeoPixel) driver."
  },
  {
    "name": "micropython-ws2801",
    "url": "https://github.com/HeMan/micropython-ws2801",
    "description": "A MicroPython library to interface with strands of WS2801 RGB LEDs."
  },
  {
    "name": "tlc5947-rgb-micropython",
    "url": "https://gitlab.com/peterzuger/tlc5947-rgb-micropython",
    "description": "Driver for the TLC5947 24 channel 12-bit PWM LED driver."
  },
  {
    "name": "Hybotics_Micropython_HT16K33",
    "url": "https://github.com/hybotics/Hybotics_Micropython_HT16K33",
    "description": "MicroPython driver for the HT16K33, a LED matrix, 7-Segment Numeric, and 14-Segment Alphanumeric display driver IC."
  },
  {
    "name": "micropython-rgbled",
    "url": "https://github.com/Warringer/micropython-rgbled",
    "description": "This wrapper module aims to reduce the work needed to work with NeoPixel (WS2812) and DotStar (APA102) RGB LED strips and matrixes."
  },
  {
    "name": "micropython_fastled",
    "url": "https://github.com/kdschlosser/micropython_fastled",
    "description": "Port of FastLED to MicroPython."
  },
  {
    "name": "micropython_quickled",
    "url": "https://github.com/thebaron88/micropython_quickled",
    "description": "MicroPython module which allows python to pump data into the ws2811 leds at full speed."
  },
  {
    "name": "micropython-rgb-led-driver",
    "url": "https://gitlab.com/Athanaze/micropython-rgb-led-driver",
    "description": "Tiny driver to control an RGB LED with PWM."
  },
  {
    "name": "micropython-dotstar",
    "url": "https://github.com/mattytrentini/micropython-dotstar",
    "description": "A MicroPython port of the Adafruit CircuitPython APA102/DotStar library."
  },
  {
    "name": "Grove_OLED",
    "url": "https://github.com/dda/MicroPython/blob/master/Grove_OLED.py",
    "description": "Driver for SSD1327 used by SeeedStudio's Grove OLED Display 1.12\" v1.0."
  },
  {
    "name": "micropython-oled",
    "url": "https://github.com/mcauser/deshipu-micropython-oled",
    "description": "Collection of drivers for monochrome OLED displays, PCD8544, SH1106, SSD1306, UC1701X."
  },
  {
    "name": "micropython-ssd1327",
    "url": "https://github.com/mcauser/micropython-ssd1327",
    "description": "Driver for SSD1327 128x128 4-bit greyscale OLED displays."
  },
  {
    "name": "micropython-ssd1351",
    "url": "https://github.com/rdagger/micropython-ssd1351",
    "description": "Driver for SSD1351 OLED displays."
  },
  {
    "name": "MicroPython_SSD1306",
    "url": "https://github.com/AnthonyKNorman/MicroPython_SSD1306",
    "description": "ESP8266 driver for SSD1306 OLED 128x64 displays."
  },
  {
    "name": "Official SSD1306",
    "url": "https://github.com/micropython/micropython/tree/master/drivers/display",
    "description": "Driver for SSD1306 128x64 OLED displays."
  },
  {
    "name": "SH1106",
    "url": "https://github.com/robert-hh/SH1106",
    "description": "Driver for the SH1106 OLED display."
  },
  {
    "name": "micropython-ssd1309",
    "url": "https://github.com/rdagger/micropython-ssd1309",
    "description": "MicroPython SSD1309 Monochrome OLED Display Driver."
  },
  {
    "name": "sh1107-micropython",
    "url": "https://github.com/nemart69/sh1107-micropython",
    "description": "MicroPython driver for SH1107-based OLED display (64 x 128)."
  },
  {
    "name": "micropython-thermal-printer",
    "url": "https://github.com/ayoy/micropython-thermal-printer",
    "description": "The MicroPython port of Python Thermal Printer by Adafruit."
  },
  {
    "name": "ads1x15",
    "url": "https://github.com/robert-hh/ads1x15",
    "description": "Driver for the ADS1015/ADS1115 ADC, I2C interface."
  },
  {
    "name": "micropython-ads1015",
    "url": "https://github.com/mcauser/deshipu-micropython-ads1015",
    "description": "ADS1015 12-Bit and ADS1115 16-bit ADC, 4 channels with programmable gain, I2C interface."
  },
  {
    "name": "Micropython_ADS1115",
    "url": "https://github.com/AnthonyKNorman/Micropython_ADS1115",
    "description": "ADS1115 16-bit ADC, 4 channels with programmable gain, I2C interface."
  },
  {
    "name": "ADS7818",
    "url": "https://github.com/robert-hh/ADS7818",
    "description": "Python class interfacing the ADS7818 AD-converter."
  },
  {
    "name": "micropython-ads1219",
    "url": "https://github.com/miketeachman/micropython-ads1219",
    "description": "MicroPython module for the Texas Instruments ADS1219 ADC."
  },
  {
    "name": "micropython-hx711",
    "url": "https://github.com/SergeyPiskunov/micropython-hx711",
    "description": "MicroPython driver for HX711 24-Bit Analog-to-Digital Converter."
  },
  {
    "name": "MicroPython-ADC_Cal",
    "url": "https://github.com/matthias-bs/MicroPython-ADC_Cal",
    "description": "ESP32 ADC driver using reference voltage calibration value from efuse."
  },
  {
    "name": "micropython-pcf8591",
    "url": "https://gitlab.com/cediddi/micropython-pcf8591",
    "description": "MicroPython driver for PCF8591 ADC/DAC, I2C interface."
  },
  {
    "name": "micropython-mcp4725",
    "url": "https://github.com/wayoda/micropython-mcp4725",
    "description": "Driver for the MCP4725 I2C DAC."
  },
  {
    "name": "mcp4728",
    "url": "https://github.com/openfablab/mcp4728",
    "description": "Helper library for the Microchip MCP4728 I2C 12-bit Quad DAC."
  },
  {
    "name": "micropython-inputs",
    "url": "https://github.com/alanmitchell/micropython-inputs",
    "description": "Classes to count pulses, debounce digital inputs, and calculate moving averages of analog inputs for a MicroPython board."
  },
  {
    "name": "ubutton",
    "url": "https://gitlab.com/WiLED-Project/ubutton",
    "description": "A MicroPython library for controlling reading and debouncing pushbutton inputs, including \"short\" and \"long\" press callbacks."
  },
  {
    "name": "micropython-debounce-switch",
    "url": "https://github.com/selfhostedhome/micropython-debounce-switch",
    "description": "MicroPython Class for Debouncing Switches."
  },
  {
    "name": "micropython-mcp230xx",
    "url": "https://github.com/ShrimpingIt/micropython-mcp230xx",
    "description": "Driver for MCP23017 and MCP23008 GPIO expanders."
  },
  {
    "name": "micropython-mcp23017",
    "url": "https://github.com/mcauser/micropython-mcp23017",
    "description": "MicroPython driver for MCP23017 16-bit I/O Expander."
  },
  {
    "name": "micropython-pcf8574",
    "url": "https://github.com/mcauser/micropython-pcf8574",
    "description": "MicroPython driver for PCF8574 8-Bit I2C I/O Expander with Interrupt."
  },
  {
    "name": "micropython-pcf8575",
    "url": "https://github.com/mcauser/micropython-pcf8575",
    "description": "MicroPython driver for PCF8575 16-Bit I2C I/O Expander with Interrupt."
  },
  {
    "name": "micropython-nunchuck",
    "url": "https://github.com/kfricke/micropython-nunchuck",
    "description": "Driver for Nunchuk game controller, I2C interface."
  },
  {
    "name": "micropython-keyboard",
    "url": "https://github.com/mcameron/micropython-keyboard",
    "description": "47 key keyboard running on a MicroPython pyboard."
  },
  {
    "name": "pico-rgbkeypad",
    "url": "https://github.com/martinohanlon/pico-rgbkeypad",
    "description": "A Python class for controlling the Pimoroni RGB Keypad for Raspberry Pi Pico."
  },
  {
    "name": "micropython-aiobutton",
    "url": "https://github.com/jacklinquan/micropython-aiobutton",
    "description": "A MicroPython module for asyncio button."
  },
  {
    "name": "micropython-ad840x",
    "url": "https://github.com/dsiggi/micropython-ad840x",
    "description": "MicroPython SPI-based manipulation of the AD series digital potentiometers AD8400, AD8402 and AD8403."
  },
  {
    "name": "mcp4131",
    "url": "https://github.com/scruss/mcp4131",
    "description": "MicroPython module to control MicroChip's MCP4131 SPI digital potentiometer."
  },
  {
    "name": "AXP202_PythonLibrary",
    "url": "https://github.com/lewisxhe/AXP202_PythonLibrary",
    "description": "MicroPython AXP202 Library."
  },
  {
    "name": "micropython_hourly_sleeper_library",
    "url": "https://github.com/costastf/micropython_hourly_sleeper_library",
    "description": "A MicroPython library that enables an esp8266 to sleep for hourly increments for a setup amount of hours."
  },
  {
    "name": "upwmcontroller",
    "url": "https://gitlab.com/WiLED-Project/upwmcontroller",
    "description": "A MicroPython library for controlling PWM outputs in an asyncio loop, with features including fading and blinking."
  },
  {
    "name": "micropython-rotary",
    "url": "https://github.com/miketeachman/micropython-rotary",
    "description": "MicroPython module to read a rotary encoder."
  },
  {
    "name": "uencoder",
    "url": "https://gitlab.com/WiLED-Project/uencoder",
    "description": "A MicroPython library for reading from a rotary encoder."
  },
  {
    "name": "encodermenu",
    "url": "https://github.com/sgall17a/encodermenu",
    "description": "Simple GUI menu for micropython using a rotary encoder and basic display."
  },
  {
    "name": "encoderLib",
    "url": "https://github.com/BramRausch/encoderLib",
    "description": "MicroPython library to handle a rotary encoder."
  },
  {
    "name": "rotary-encoder",
    "url": "https://github.com/gurgleapps/rotary-encoder",
    "description": "MicroPython code to drive a KY-040 rotary encoder."
  },
  {
    "name": "micropython-encoder-knob",
    "url": "https://github.com/infinite-tree/micropython-encoder-knob",
    "description": "A very simple lightweight encoder knob library with button support."
  },
  {
    "name": "encoders Short document explaining issues around encoder technology.",
    "url": "https://github.com/peterhinch/micropython-samples/blob/master/encoders/ENCODERS.md"
  },
  {
    "name": "asynchronous encoder driver Interface an encoder to uasyncio code.",
    "url": "https://github.com/peterhinch/micropython-async/blob/master/v3/primitives/encoder.py"
  },
  {
    "name": "micropython-74hc595",
    "url": "https://github.com/mcauser/micropython-74hc595",
    "description": "MicroPython driver for 74HC595 8-bit shift registers."
  },
  {
    "name": "MicroPython-SN74HCS264",
    "url": "https://gitlab.com/olivierlenoir/MicroPython-SN74HCS264",
    "description": "MicroPython Driver for SN74HCS264 8-Bit Parallel-Out Serial Shift Registers With Schmitt-Trigger Inputs and Inverted Outputs."
  },
  {
    "name": "Micropython-AD9833",
    "url": "https://github.com/KipCrossing/Micropython-AD9833",
    "description": "Pyboard driver for AD9833, spi interface."
  },
  {
    "name": "Clock_Generators",
    "url": "https://github.com/Wei1234c/Clock_Generators",
    "description": "Clock generators (Si5351 for now) toolbox."
  },
  {
    "name": "Signal_Generators",
    "url": "https://github.com/Wei1234c/Signal_Generators",
    "description": "Signal generators (AD9833, AD9834, AD9850, ADF4351) tools box."
  },
  {
    "name": "ad9850_signalgen",
    "url": "https://github.com/brenn/ad9850_signalgen",
    "description": "MicroPython library for AD9850 synthesizer."
  },
  {
    "name": "L298N",
    "url": "https://github.com/GuyCarver/MicroPython/blob/master/lib/L298N.py",
    "description": "Driver for the L298N dual h-bridge motor controller."
  },
  {
    "name": "MicroPython-L298",
    "url": "https://gitlab.com/olivierlenoir/MicroPython-L298",
    "description": "Drive L298 dual H-bridge with MicroPython."
  },
  {
    "name": "micropython-pca9685",
    "url": "https://github.com/mcauser/deshipu-micropython-pca9685",
    "description": "16-channel 12-bit PWM/servo driver."
  },
  {
    "name": "micropython-upybbot",
    "url": "https://github.com/jeffmer/micropython-upybbot",
    "description": "A4988 driver for bipolar stepper motors."
  },
  {
    "name": "uln2003",
    "url": "https://github.com/IDWizard/uln2003",
    "description": "Driver for 5V 28BYJ-48 stepper motors."
  },
  {
    "name": "micropython-multiaxis",
    "url": "https://gitlab.com/olivierlenoir/micropython-multiaxis",
    "description": "Multiaxis with MicroPython ESP32 and DRV8825."
  },
  {
    "name": "ticlib",
    "url": "https://github.com/jphalip/ticlib",
    "description": "Driver for Pololu Tic stepper motor controllers."
  },
  {
    "name": "AccelStepper-MicroPython",
    "url": "https://github.com/pedromneto97/AccelStepper-MicroPython",
    "description": "AccelStepper Library for MicroPython - ESP32."
  },
  {
    "name": "pystepper",
    "url": "https://github.com/marcio-pessoa/pystepper",
    "description": "MicroPython Stepper Motor Sequence Control."
  },
  {
    "name": "uPySteppers",
    "url": "https://github.com/lemariva/uPySteppers",
    "description": "DIY rotating platform using an ESP32 connected to Wi-Fi."
  },
  {
    "name": "microPython_AMIS-30543",
    "url": "https://github.com/capella-ben/microPython_AMIS-30543",
    "description": "MicroPython library for Stepper Driver control using AMIS-30543 driver."
  },
  {
    "name": "ADXL345-with-Pyboard",
    "url": "https://github.com/AbhinayBandaru/ADXL345-with-Pyboard",
    "description": "Driver for ADXL345 16g 3-axis accelerometer."
  },
  {
    "name": "adxl345_micropython",
    "url": "https://github.com/fanday/adxl345_micropython",
    "description": "Driver for ADXL345 16g 3-axis accelerometer."
  },
  {
    "name": "micropython-lis2hh12",
    "url": "https://github.com/tuupola/micropython-lis2hh12",
    "description": "I2C driver for LIS2HH12 3-axis accelerometer."
  },
  {
    "name": "MMA7660",
    "url": "https://github.com/Bucknalla/MicroPython-3-Axis-Accelerometer/blob/master/MMA7660.py",
    "description": "Driver for MMA7660 1.5g 3-axis accelerometer."
  },
  {
    "name": "ADXL345_spi_micropython",
    "url": "https://github.com/AlekseyFedorovich/ADXL345_spi_micropython",
    "description": "Library for interacting through the SPI protocol with an 'Analog Devices ADXL345' accelerometer from an MCU flashed with MicroPython."
  },
  {
    "name": "CCS811",
    "url": "https://github.com/Ledbelly2142/CCS811",
    "description": "CCS811 Air Quality Sensor."
  },
  {
    "name": "upython-aq-monitor",
    "url": "https://github.com/ayoy/upython-aq-monitor",
    "description": "Air Quality monitor using PMS5003 sensor and WiPy."
  },
  {
    "name": "micropython-pms7003",
    "url": "https://github.com/pkucmus/micropython-pms7003",
    "description": "MicroPython driver for the PMS7003 Air Quality Sensor."
  },
  {
    "name": "pms5003_micropython",
    "url": "https://github.com/kevinkk525/pms5003_micropython",
    "description": "Driver for pms5003 air quality sensor for MicroPython."
  },
  {
    "name": "micropython-pms5003-minimal",
    "url": "https://github.com/miketeachman/micropython-pms5003-minimal",
    "description": "Driver for pms5003 air quality sensor for MicroPython."
  },
  {
    "name": "polly",
    "url": "https://github.com/g-sam/polly",
    "description": "SDS011 pollution sensor + Wemos D1 mini pro + MicroPython."
  },
  {
    "name": "micropython-bme280",
    "url": "https://github.com/kevbu/micropython-bme280",
    "description": "Driver for the Bosch BME280 temperature/pressure/humidity sensor."
  },
  {
    "name": "micropython-bmp180",
    "url": "https://github.com/micropython-IMU/micropython-bmp180",
    "description": "Driver for Bosch BMP180 temperature, pressure and altitude sensor."
  },
  {
    "name": "mpy_bme280_esp8266",
    "url": "https://github.com/catdog2/mpy_bme280_esp8266",
    "description": "Bosch BME280 temperature/pressure/humidity sensor."
  },
  {
    "name": "BME280",
    "url": "https://github.com/robert-hh/BME280",
    "description": "MicroPython driver for the BME280 sensor, target platform Pycom devices."
  },
  {
    "name": "micropython-bmp280",
    "url": "https://github.com/dafvid/micropython-bmp280",
    "description": "Module for the BMP280 sensor."
  },
  {
    "name": "micropython_bme280_i2c",
    "url": "https://github.com/triplepoint/micropython_bme280_i2c",
    "description": "A MicroPython module for communicating with the Bosch BME280 temperature, humidity, and pressure sensor."
  },
  {
    "name": "MicroPython-BME280",
    "url": "https://github.com/neliogodoi/MicroPython-BME280",
    "description": "Driver to digital sensor of Temperature, Pressure and Humidity."
  },
  {
    "name": "micropython-bmp180",
    "url": "https://gitlab.com/flowolf/micropython-bmp180",
    "description": "A module for MicroPython which provides a class for the BMP180 pressure sensor."
  },
  {
    "name": "BMP390",
    "url": "https://github.com/octaprog7/BMP390",
    "description": "MicroPython module for BMP390 pressure & temperature sensor."
  },
  {
    "name": "BMP180",
    "url": "https://github.com/octaprog7/BMP180",
    "description": "MicroPython module for BMP180 pressure & temperature sensor."
  },
  {
    "name": "Micropython-LC709203F",
    "url": "https://github.com/scopelemanuele/Micropython-LC709203F",
    "description": "A simple MicroPython library for LC709293F Fuel Gauge."
  },
  {
    "name": "micropython-fingerprint",
    "url": "https://github.com/chrisb2/micropython-fingerprint",
    "description": "MicroPython library for reading Grow and ZhianTec finger print sensors."
  },
  {
    "name": "MAX30102-MicroPython-driver",
    "url": "https://github.com/n-elia/MAX30102-MicroPython-driver",
    "description": "A MAX30102 driver ported to MicroPython. It should also work for MAX30105."
  },
  {
    "name": "micropython-ov2640",
    "url": "https://github.com/namato/micropython-ov2640",
    "description": "MicroPython class for OV2640 camera."
  },
  {
    "name": "Nikon-Trigger-for-MicroPython",
    "url": "https://github.com/Thekegman/Nikon-Trigger-for-MicroPython",
    "description": "Remote trigger for a Nikon camera using an IR LED. For PyBoard v1.1."
  },
  {
    "name": "micropython-camera-driver",
    "url": "https://github.com/lemariva/micropython-camera-driver",
    "description": "OV2640 camera driver for MicroPython on ESP32."
  },
  {
    "name": "esp32-cam-micropython",
    "url": "https://github.com/shariltumin/esp32-cam-micropython",
    "description": "MicroPython esp32-cam."
  },
  {
    "name": "uPyCam",
    "url": "https://github.com/lemariva/uPyCam",
    "description": "Take a photo with an ESP32-CAM running MicroPython."
  },
  {
    "name": "OV2640_uPy",
    "url": "https://github.com/FunPythonEC/OV2640_uPy",
    "description": "OV2640 Camera Library for MicroPython."
  },
  {
    "name": "MQTT-Cam",
    "url": "https://github.com/jono-allen/MQTT-Cam",
    "description": "ESP-32 Cam MicroPython MQTT AWS S3 Uploader."
  },
  {
    "name": "micropython-tcs34725",
    "url": "https://gitlab.com/robhamerling/micropython-tcs34725",
    "description": "Driver class for TCS34725 and TCS34727 color sensors."
  },
  {
    "name": "micropython-esp8266-hmc5883l",
    "url": "https://github.com/gvalkov/micropython-esp8266-hmc5883l",
    "description": "3-axis digital compass on the ESP8266."
  },
  {
    "name": "QMC5883",
    "url": "https://github.com/robert-hh/QMC5883",
    "description": "Python class for the QMC5883 Three-Axis Digital Compass IC."
  },
  {
    "name": "microPython_AS5600L",
    "url": "https://github.com/capella-ben/microPython_AS5600L",
    "description": "MicroPython driver for AS5600L magnet rotary position sensor."
  },
  {
    "name": "micropythonINA219",
    "url": "https://github.com/kabel42/micropythonINA219",
    "description": "Driver for INA219 current sensor."
  },
  {
    "name": "pyb_ina219",
    "url": "https://github.com/chrisb2/pyb_ina219",
    "description": "Driver for INA219 current sensor."
  },
  {
    "name": "INA219",
    "url": "https://github.com/robert-hh/INA219",
    "description": "INA219 MicroPython driver."
  },
  {
    "name": "TI_INA226_micropython",
    "url": "https://github.com/elschopi/TI_INA226_micropython",
    "description": "MicroPython driver for Texas Instruments INA226 power measuring IC."
  },
  {
    "name": "micropython-current-monitor",
    "url": "https://gitlab.com/n.rj.powers/micropython-current-monitor",
    "description": "Current monitor using the INA219 and an SSD1306 OLED."
  },
  {
    "name": "micropython-gp2y0e03",
    "url": "https://github.com/mcauser/deshipu-micropython-gp2y0e03",
    "description": "IR-LED distance measuring sensor using Sharp GP2Y0E03."
  },
  {
    "name": "micropython-vl6180",
    "url": "https://github.com/mcauser/deshipu-micropython-vl6180",
    "description": "Time-of-Flight sensor, ambient light sensor & IR emitter."
  },
  {
    "name": "micropython-vl53l0x",
    "url": "https://github.com/mcauser/deshipu-micropython-vl53l0x",
    "description": "Time-of-Flight laser-ranging sensor."
  },
  {
    "name": "Qwiic_TOF_Module_RFD77402",
    "url": "https://github.com/ZIOCC/Qwiic_TOF_Module_RFD77402",
    "description": "Qwiic TOF Module (RFD77402) time-of-flight rangefinding module."
  },
  {
    "name": "VL53L0X",
    "url": "https://github.com/uceeatz/VL53L0X",
    "description": "MicroPython Library for Lidar Sensor VL53L0X."
  },
  {
    "name": "vl53l1x_pico",
    "url": "https://github.com/drakxtwo/vl53l1x_pico",
    "description": "MicroPython driver for the vl53l1x ToF sensor."
  },
  {
    "name": "tf-luna-micropython",
    "url": "https://github.com/davmoz/tf-luna-micropython",
    "description": "A simple MicroPython i2c library for TF-Luna LiDAR Module."
  },
  {
    "name": "vl53l5cx",
    "url": "https://github.com/mp-extras/vl53l5cx",
    "description": "MicroPython and CircuitPython Package for the VL53L5CX (4x4/8x8 ToF sensor array)."
  },
  {
    "name": "micropython-hcsr04",
    "url": "https://github.com/rsc1975/micropython-hcsr04",
    "description": "Driver for HC-SR04 ultrasonic distance sensors."
  },
  {
    "name": "micropython-us100",
    "url": "https://github.com/kfricke/micropython-us100",
    "description": "MicroPython driver for the US-100 sonar distance sensor."
  },
  {
    "name": "pyGP2Y",
    "url": "https://github.com/amigcamel/pyGP2Y",
    "description": "MicroPython library for the Sharp GP2Y1014AU0F Dust Sensor."
  },
  {
    "name": "ATM90E26_Micropython",
    "url": "https://github.com/whatnick/ATM90E26_Micropython",
    "description": "Driver for ATM90E26 energy metering device."
  },
  {
    "name": "MCP39F521",
    "url": "https://github.com/warpme/MCP39F521",
    "description": "ESP8266 scripts for reading MCP39F521 power monitors."
  },
  {
    "name": "micropython-p1meter",
    "url": "https://github.com/Josverl/micropython-p1meter",
    "description": "A ESP32 sensor to read an p1 electricity meter and publish this to MQTT and HomeAssistant, written in MicroPython."
  },
  {
    "name": "esp32-solar2",
    "url": "https://github.com/octopusengine/esp32-solar2",
    "description": "Simple solar regulator - MicroPython project."
  },
  {
    "name": "micropython-MQ",
    "url": "https://github.com/kartun83/micropython-MQ",
    "description": "Drivers for MQ series gas sensors."
  },
  {
    "name": "MQ135",
    "url": "https://github.com/rubfi/MQ135",
    "description": "Driver for MQ135 gas sensor."
  },
  {
    "name": "CCS811",
    "url": "https://github.com/Notthemarsian/CCS811",
    "description": "Basic MicroPython driver for CCS811 on ESP8266 boards."
  },
  {
    "name": "micropython-scd30",
    "url": "https://github.com/agners/micropython-scd30",
    "description": "MicroPython I2C driver for Sensirion SCD30 CO2 sensor module."
  },
  {
    "name": "micropython-sgp40",
    "url": "https://github.com/agners/micropython-sgp40",
    "description": "MicroPython I2C driver for SGP40 VOC sensor module."
  },
  {
    "name": "MICS6814-Micropython-driver",
    "url": "https://gitlab.com/DanNduati/MICS6814-Micropython-driver",
    "description": "ESP32 MicroPython driver for the Pimoroni mics6814 breakout board."
  },
  {
    "name": "MicroPython-SI1145",
    "url": "https://github.com/neliogodoi/MicroPython-SI1145",
    "description": "SI1145 UV index, IR, visible light and proximity sensor."
  },
  {
    "name": "micropython-tsl2561",
    "url": "https://github.com/kfricke/micropython-tsl2561",
    "description": "Driver for the TSL2561 illumination sensor from TAOS / ams."
  },
  {
    "name": "mpy_bh1750fvi_esp8266",
    "url": "https://github.com/catdog2/mpy_bh1750fvi_esp8266",
    "description": "ESP8266 driver for BH1750FVI sensor."
  },
  {
    "name": "bh1750",
    "url": "https://github.com/PinkInk/upylib/tree/master/bh1750",
    "description": "BH1750 i2c digital light sensor driver."
  },
  {
    "name": "micropython-max44009",
    "url": "https://github.com/mcauser/micropython-max44009",
    "description": "MicroPython driver for the MAX44009 ambient light sensor."
  },
  {
    "name": "veml7700",
    "url": "https://github.com/palouf34/veml7700",
    "description": "Library for MicroPython for VEML7700 light sensor."
  },
  {
    "name": "MicroPython_MAX44009_driver",
    "url": "https://github.com/rcolistete/MicroPython_MAX44009_driver",
    "description": "MicroPython driver for MAX44009 light sensor."
  },
  {
    "name": "micropython-bmx055",
    "url": "https://github.com/micropython-IMU/micropython-bmx055",
    "description": "Driver for Bosch BMX055 IMU sensor."
  },
  {
    "name": "micropython-bno055",
    "url": "https://github.com/deshipu/micropython-bno055",
    "description": "Bosch Sensortec BNO055 9DOF IMU sensor, I2C interface."
  },
  {
    "name": "micropython-lsm9ds0",
    "url": "https://github.com/micropython-IMU/micropython-lsm9ds0",
    "description": "LSM9DS0 g-force linear acceleration, gauss magnetic and dps angular rate sensors."
  },
  {
    "name": "micropython-mpu9250",
    "url": "https://github.com/tuupola/micropython-mpu9250",
    "description": "I2C driver for MPU9250 9-axis motion tracking device."
  },
  {
    "name": "micropython-mpu9x50",
    "url": "https://github.com/micropython-IMU/micropython-mpu9x50",
    "description": "Driver for the InvenSense MPU9250 inertial measurement unit."
  },
  {
    "name": "MPU6050-ESP8266-MicroPython",
    "url": "https://github.com/adamjezek98/MPU6050-ESP8266-MicroPython",
    "description": "ESP8266 driver for MPU6050 accelerometer/gyroscope."
  },
  {
    "name": "py-mpu6050",
    "url": "https://github.com/larsks/py-mpu6050",
    "description": "ESP8266 driver for MPU6050 accelerometer/gyroscope."
  },
  {
    "name": "micropython-mpu6886",
    "url": "https://github.com/tuupola/micropython-mpu6886",
    "description": "MicroPython I2C driver for MPU6886 6-axis motion tracking device."
  },
  {
    "name": "micropython-fusion",
    "url": "https://github.com/micropython-IMU/micropython-fusion",
    "description": "Sensor fusion calculates heading, pitch and roll from the outputs of motion tracking devices."
  },
  {
    "name": "flight_controller",
    "url": "https://github.com/wagnerc4/flight_controller",
    "description": "MicroPython flight controller."
  },
  {
    "name": "micropython-bno055",
    "url": "https://github.com/micropython-IMU/micropython-bno055",
    "description": "Bosch BNO055 driver for MicroPython. IMU with hardware sensor fusion."
  },
  {
    "name": "micropython-mpu6050-mqtt-streamer",
    "url": "https://github.com/mozanunal/micropython-mpu6050-mqtt-streamer",
    "description": "Stream data from MPU6050 to MQTT server using MicroPython on ESP8266."
  },
  {
    "name": "upy-motion",
    "url": "https://github.com/OneMadGypsy/upy-motion",
    "description": "A simple MPU6050 driver written in MicroPython."
  },
  {
    "name": "micropython-bno08x-rvc",
    "url": "https://github.com/rdagger/micropython-bno08x-rvc",
    "description": "MicroPython library for bno08x."
  },
  {
    "name": "micropython-mpu9250",
    "url": "https://gitlab.com/nnayo/micropython-mpu9250",
    "description": "MicroPython MPU-9250 (MPU-6500 + AK8963) I2C driver."
  },
  {
    "name": "ms5803-micropython",
    "url": "https://github.com/minyiky/ms5803-micropython",
    "description": "A MicroPython implementation of the driver for an MS5803 pressure & temperature sensor."
  },
  {
    "name": "MPL3115A2_MicroPython",
    "url": "https://github.com/PinsonJonas/MPL3115A2_MicroPython",
    "description": "MicroPython library for the MPL3115A2 Altimeter."
  },
  {
    "name": "uPy_APDS9960",
    "url": "https://github.com/rlangoy/uPy_APDS9960",
    "description": "MicroPython proximity library for esp8266 using APDS9960."
  },
  {
    "name": "micropython-geiger",
    "url": "https://github.com/Josep/micropython-geiger",
    "description": "Geiger counter with MicroPython card."
  },
  {
    "name": "ESPGeiger",
    "url": "https://github.com/biemster/ESPGeiger",
    "description": "MicroPython library for the ESP8266 Geiger counter."
  },
  {
    "name": "micropython-chirp",
    "url": "https://github.com/robberwick/micropython-chirp",
    "description": "Driver for the Chirp Soil Moisture Sensor."
  },
  {
    "name": "MicroPython-MiFlora",
    "url": "https://github.com/matthias-bs/MicroPython-MiFlora",
    "description": "Xiaomi Mi Flora (aka. flower care) BLE plant sensors (soil moisture/conductivity/light intensity/temperature)."
  },
  {
    "name": "AS726X_LoPy",
    "url": "https://github.com/jajberni/AS726X_LoPy",
    "description": "MicroPython driver for the AS726X spectral sensor."
  },
  {
    "name": "micropython-max31855",
    "url": "https://github.com/mcauser/deshipu-micropython-max31855",
    "description": "Thermocouple amplifier, SPI interface."
  },
  {
    "name": "max31856",
    "url": "https://github.com/alinbaltaru/max31856",
    "description": "Precision thermocouple to digital converter with linearization, SPI interface."
  },
  {
    "name": "mcp9700",
    "url": "https://gitlab.com/CrispyCrafter/mcp9700",
    "description": "Generic MicroPython driver for MCP9700."
  },
  {
    "name": "bme680-mqtt-micropython",
    "url": "https://github.com/robmarkcole/bme680-mqtt-micropython",
    "description": "Driver for BME680 gas, pressure, temperature and humidity sensor."
  },
  {
    "name": "LM75-MicroPython",
    "url": "https://github.com/OldhamMade/LM75-MicroPython",
    "description": "Driver for LM75 digital temperature sensor, I2C interface."
  },
  {
    "name": "micropython-am2320",
    "url": "https://github.com/mcauser/micropython-am2320",
    "description": "Aosong AM2320 temperature and humidity sensor, I2C interface."
  },
  {
    "name": "micropython-dht12",
    "url": "https://github.com/mcauser/micropython-dht12",
    "description": "Aosong DHT12 temperature and humidity sensor, I2C interface."
  },
  {
    "name": "micropython-hdc1008",
    "url": "https://github.com/kfricke/micropython-hdc1008",
    "description": "Driver for the Texas Instruments HDC1008 humidity and temperature sensor."
  },
  {
    "name": "micropython-mcp9808",
    "url": "https://github.com/kfricke/micropython-mcp9808",
    "description": "Driver for the Microchip MCP9808 temperature sensor."
  },
  {
    "name": "micropython-mpl115a2",
    "url": "https://github.com/khoulihan/micropython-mpl115a2",
    "description": "Pyboard driver for the MPL115A2 barometric pressure sensor."
  },
  {
    "name": "micropython-sht30",
    "url": "https://github.com/rsc1975/micropython-sht30",
    "description": "Driver for SHT30 temperature and humidity sensor."
  },
  {
    "name": "micropython-sht31",
    "url": "https://github.com/kfricke/micropython-sht31",
    "description": "Driver for the SHT31 temperature and humidity sensor."
  },
  {
    "name": "micropython-Si7005",
    "url": "https://github.com/Smrtokvitek/micropython-Si7005",
    "description": "Driver for Si7005 relative humidity and temperature sensor."
  },
  {
    "name": "micropython-si7021",
    "url": "https://github.com/mcauser/deshipu-micropython-si7021",
    "description": "SI7021 Temperature and humidity sensor, I2C interface."
  },
  {
    "name": "micropython-si7021",
    "url": "https://github.com/chrisbalmer/micropython-si7021",
    "description": "SI7021 Temperature and humidity sensor, I2C interface."
  },
  {
    "name": "micropython-Si705x",
    "url": "https://github.com/billyrayvalentine/micropython-Si705x",
    "description": "Silicon Labs Si705x series of temperature sensors, I2C interface."
  },
  {
    "name": "micropython-Si70xx",
    "url": "https://github.com/billyrayvalentine/micropython-Si70xx",
    "description": "Silicon Labs Si70xx series of relative humidity and temperature sensors, I2C interface."
  },
  {
    "name": "micropython-tmp102",
    "url": "https://github.com/khoulihan/micropython-tmp102",
    "description": "Driver for TMP102 digital temperature sensor."
  },
  {
    "name": "Official DHT11+DHT12",
    "url": "https://github.com/micropython/micropython/blob/master/drivers/dht/dht.py",
    "description": "ESP8266 driver for DHT11 and DHT12 temperature and humidity sensor."
  },
  {
    "name": "sht25-micropython",
    "url": "https://github.com/Miceuz/sht25-micropython",
    "description": "Driver for SHT25 temperature and humidity sensor."
  },
  {
    "name": "micropython-tmp1075",
    "url": "https://github.com/mattytrentini/micropython-tmp1075",
    "description": "Driver for the TI TMP1075 temperature sensor."
  },
  {
    "name": "micropython-sht11",
    "url": "https://github.com/2black0/micropython-sht11",
    "description": "Driver for Sensirion SHT11 temperature and humidity sensor."
  },
  {
    "name": "micropython-lm75a",
    "url": "https://github.com/mcauser/micropython-lm75a",
    "description": "Driver for the NXP LM75A digital temperature sensor."
  },
  {
    "name": "BME680-Micropython",
    "url": "https://github.com/robert-hh/BME680-Micropython",
    "description": "MicroPython driver for the BME680 sensor."
  },
  {
    "name": "htu21d-esp8266",
    "url": "https://github.com/julianhille/htu21d-esp8266",
    "description": "This is a MicroPython module / class to measure data from the htu21d."
  },
  {
    "name": "HTU21D Asynchronous driver for this temperature and humidity sensor.",
    "url": "https://github.com/peterhinch/micropython-async/blob/master/v3/docs/HTU21D.md"
  },
  {
    "name": "esp-sht3x-micropython",
    "url": "https://github.com/HAIZAKURA/esp-sht3x-micropython",
    "description": "A SHT3x (SHT30/31/35) Lib for esp8266/esp32 with MicroPython."
  },
  {
    "name": "sht25-micropython",
    "url": "https://gitlab.com/miceuz/sht25-micropython",
    "description": "MicroPython implementation of API of SHT25 Humidity and Temperature Sensor."
  },
  {
    "name": "micropython-sht30",
    "url": "https://github.com/schinckel/micropython-sht30",
    "description": "SHT30 sensor driver in pure python based on I2C bus."
  },
  {
    "name": "micropython_ahtx0",
    "url": "https://github.com/targetblank/micropython_ahtx0",
    "description": "MicroPython driver for the AHT10 and AHT20 temperature and humidity sensors."
  },
  {
    "name": "sht85",
    "url": "https://github.com/octaprog7/sht85",
    "description": "MicroPython driver for the Sensiron SHT85 humidity and temperature sensor."
  },
  {
    "name": "micropython-mlx90614",
    "url": "https://github.com/mcauser/micropython-mlx90614",
    "description": "Driver for Melexis MLX90614 IR temperature sensor."
  },
  {
    "name": "micropython-mpr121",
    "url": "https://github.com/mcauser/micropython-mpr121",
    "description": "Driver for MPR121 capacitive touch keypads and breakout boards."
  },
  {
    "name": "micropython-ttp223",
    "url": "https://github.com/mcauser/micropython-ttp223",
    "description": "Examples using TTP223 capacitive touch module."
  },
  {
    "name": "micropython-TTP229-BSF",
    "url": "https://github.com/alankrantas/micropython-TTP229-BSF",
    "description": "MicroPython ESP8266/ESP32 driver for TTP229-BSF 16-key capacitive keypad in serial interface mode."
  },
  {
    "name": "uFT6336U",
    "url": "https://github.com/fantasticdonkey/uFT6336U",
    "description": "MicroPython I2C driver for the Focus LCDs FT6336U capacitive touch panel controller IC."
  },
  {
    "name": "XPT2046-touch-pad-driver",
    "url": "https://github.com/robert-hh/XPT2046-touch-pad-driver",
    "description": "Driver for XPT2046 touch pad controller used in many TFT modules."
  },
  {
    "name": "micropython-mcron",
    "url": "https://github.com/fizista/micropython-mcron",
    "description": "MicroCRON is a time-based task scheduling program for MicroPython."
  },
  {
    "name": "micropython-scron",
    "url": "https://github.com/fizista/micropython-scron",
    "description": "SimpleCRON is a time-based task scheduling program inspired by the well-known CRON program for Unix systems."
  },
  {
    "name": "Schedule A scheduler for uasyncio based applications. Schedule events at specified times and dates.",
    "url": "https://github.com/peterhinch/micropython-async/blob/master/v3/docs/SCHEDULE.md"
  },
  {
    "name": "uPyMySQL",
    "url": "https://github.com/dvrhax/uPyMySQL",
    "description": "Pure uPython MySQL Client."
  },
  {
    "name": "micropython-redis",
    "url": "https://github.com/dwighthubbard/micropython-redis",
    "description": "A redis client implementation designed for use with MicroPython."
  },
  {
    "name": "picoredis",
    "url": "https://github.com/SpotlightKid/picoredis",
    "description": "A very minimal Redis client (not only) for MicroPython."
  },
  {
    "name": "micropg",
    "url": "https://github.com/nakagami/micropg",
    "description": "PostgreSQL database driver for MicroPython."
  },
  {
    "name": "nmongo",
    "url": "https://github.com/nakagami/nmongo",
    "description": "MongoDB client for CPython and MicroPython, with mongo shell like APIs."
  },
  {
    "name": "MicroPyDatabase",
    "url": "https://github.com/sungkhum/MicroPyDatabase",
    "description": "A low-memory json-based database for MicroPython."
  },
  {
    "name": "micropython-firebase-realtime-database",
    "url": "https://github.com/ckoever/micropython-firebase-realtime-database",
    "description": "Firebase implementation for MicroPython optimized for ESP32."
  },
  {
    "name": "micropython-firebase-firestore",
    "url": "https://github.com/WoolDoughnut310/micropython-firebase-firestore",
    "description": "Firebase Firestore implementation for MicroPython."
  },
  {
    "name": "uSQLite",
    "url": "https://github.com/spatialdude/usqlite",
    "description": "SQLite library module for MicroPython."
  },
  {
    "name": "micropython_eeprom",
    "url": "https://github.com/peterhinch/micropython_eeprom",
    "description": "Cross platform MicroPython device drivers for memory chips (EEPROM, FRAM, Flash, PSRAM)."
  },
  {
    "name": "mb_24x256_512",
    "url": "https://github.com/MarksBench/mb_24x256_512",
    "description": "Very simple MicroPython module/driver for Microchip 24x256 and 24x512 I2C EEPROM devices."
  },
  {
    "name": "micropython_data_to_py",
    "url": "https://github.com/peterhinch/micropython_data_to_py",
    "description": "A Python3 utility to convert an arbitrary binary file to Python source for freezing as bytecode in Flash."
  },
  {
    "name": "micropython-winbond",
    "url": "https://github.com/brainelectronics/micropython-winbond",
    "description": "Interact with Winbond W25Q Flash chips via SPI."
  },
  {
    "name": "micropython-fram",
    "url": "https://github.com/rolandvs/micropython-fram",
    "description": "Pyboard driver for Ferroelectric RAM module."
  },
  {
    "name": "mb_PSRAM_64Mb_SPI",
    "url": "https://github.com/MarksBench/mb_PSRAM_64Mb_SPI",
    "description": "Very simple MicroPython module to use a generic 64Mbit PSRAM (ie Adafruit 4677) with a Raspberry Pi Pico (RP2040)."
  },
  {
    "name": "mb_23LC1024",
    "url": "https://github.com/MarksBench/mb_23LC1024",
    "description": "Very simple MicroPython module to use a Microchip 23LC1024 SPI SRAM with a Raspberry Pi Pico (RP2040)."
  },
  {
    "name": "mb_47x16",
    "url": "https://github.com/MarksBench/mb_47x16",
    "description": "Very simple MicroPython module/driver for Microchip 47x16 EERAM devices (47L/47C)."
  },
  {
    "name": "MicroWorkers",
    "url": "https://github.com/jczic/MicroWorkers",
    "description": "A micro workers class that easily manages a pool of threads to optimise simultaneous jobs and jobs endings, for MicroPython (used on Pycom modules & ESP32)."
  },
  {
    "name": "upymenu",
    "url": "https://github.com/jplattel/upymenu",
    "description": "MicroPython Menu for LCD Displays."
  },
  {
    "name": "MicroPython Forum",
    "url": "https://forum.micropython.org/",
    "description": "Online community of over 6400 users discussing all things related to MicroPython."
  },
  {
    "name": "MicroPython on Twitter",
    "url": "https://twitter.com/micropython?lang=en",
    "description": "Follow MicroPython on Twitter for latest news and updates."
  },
  {
    "name": "MicroPython on Facebook",
    "url": "https://www.facebook.com/micropython",
    "description": "Like MicroPython on Facebook for competitions, news and updates."
  },
  {
    "name": "Melbourne MicroPython Meetup",
    "url": "https://www.meetup.com/en-AU/MicroPython-Meetup",
    "description": "Regular meetup at CCHS in Melbourne, Australia."
  },
  {
    "name": "Slack",
    "url": "https://slack-micropython.herokuapp.com/",
    "description": "Get an automated invite to the micropython.slack.com workspace."
  },
  {
    "name": "Discord",
    "url": "https://discord.gg/qw7d8bv",
    "description": "Get an invite to the MicroPython Discord server."
  },
  {
    "name": "uasyncio",
    "url": "https://github.com/peterhinch/micropython-async/blob/master/v3/docs/TUTORIAL.md",
    "description": "Write asynchronous code which interfaces to hardware devices."
  },
  {
    "name": "Asynchronous drivers",
    "url": "https://github.com/peterhinch/micropython-async/blob/master/v3/docs/DRIVERS.md",
    "description": "Tutorial and code for asynchronous interfaces to switches, pushbuttons, encoders and ADCs."
  },
  {
    "name": "Pyboard micropower",
    "url": "https://github.com/peterhinch/micropython-micropower",
    "description": "Tutorial and code for low power applications on Pyboard 1.x and Pyboard D."
  },
  {
    "name": "3D rotation with quaternions",
    "url": "https://github.com/peterhinch/micropython-samples/blob/master/QUATERNIONS.md",
    "description": "Tutorial and code for the easy way to do 3D rotation."
  },
  {
    "name": "Miguel Grinberg",
    "url": "https://blog.miguelgrinberg.com/category/MicroPython",
    "description": "MicroPython and the Internet of Things."
  },
  {
    "name": "Bhavesh Kakwani",
    "url": "https://bhave.sh/",
    "description": "Bi-weekly MicroPython video + written tutorials."
  },
  {
    "name": "CoderDojo Twin Cities MicroPython",
    "url": "https://www.coderdojotc.org/micropython/",
    "description": "Full coding curriculum for teaching MicroPython to children."
  },
  {
    "name": "Programming with MicroPython: Embedded Programming with Microcontrollers and Python",
    "url": "https://shop.oreilly.com/product/0636920056515.do",
    "description": "By Nicholas H. Tollervey. ISBN 9781491972731."
  },
  {
    "name": "MicroPython for the Internet of Things: A Beginner's Guide to Programming with Python on Microcontrollers",
    "url": "https://link.springer.com/book/10.1007/978-1-4842-3123-4",
    "description": "By Charles Bell. ISBN 9781484231227."
  },
  {
    "name": "Beginning MicroPython with the Raspberry Pi Pico: Build Electronics and IoT Projects",
    "url": "https://link.springer.com/book/10.1007/978-1-4842-8135-2",
    "description": "By Charles Bell. ISBN 9781484281345."
  },
  {
    "name": "MicroPython Cookbook",
    "url": "https://www.packtpub.com/au/application-development/micropython-cookbook",
    "description": "By Marwan Alsabbagh. ISBN 9781838649951."
  },
  {
    "name": "Python for Microcontrollers: Getting Started with MicroPython",
    "url": "https://www.mheducation.com.au/python-for-microcontrollers-getting-started-with-micropython-9781259644535-aus",
    "description": "By Donald Norris. ISBN 9781259644535."
  },
  {
    "name": "Advanced Programming in MicroPython By Example",
    "url": "https://www.amazon.com/Advanced-Programming-MicroPython-Example-Magda/dp/1090900937",
    "description": "By Yury Magda. ISBN 9781090900937."
  },
  {
    "name": "MicroPython Projects",
    "url": "https://www.packtpub.com/au/iot-hardware/micropython-projects",
    "description": "By Jacob Beningo. ISBN 9781789958034."
  },
  {
    "name": "Get Started with MicroPython on Raspberry Pi Pico",
    "url": "https://store.rpipress.cc/products/get-started-with-micropython-on-raspberry-pi-pico",
    "description": "By Gareth Halfacree and Ben Everard. ISBN 9781912047864."
  },
  {
    "name": "MicroPython for Microcontrollers",
    "url": "https://www.elektor.com/micropython-for-microcontrollers-e-book",
    "description": "By Günter Spanner. ISBN 9783895764370."
  },
  {
    "name": "micrOS",
    "url": "https://github.com/BxNxM/micrOS",
    "description": "MicroPython based IoT Framework."
  },
  {
    "name": "terkin-datalogger",
    "url": "https://github.com/hiveeyes/terkin-datalogger",
    "description": "Flexible data logger application for MicroPython and CPython."
  },
  {
    "name": "perthensis",
    "url": "https://codeberg.org/scy/perthensis",
    "description": "Perthensis: an asynchronous framework for MicroPython."
  },
  {
    "name": "MicroPython",
    "url": "https://micropython.org",
    "description": "Project website. Test drive the pyboard. Try MicroPython online with unicorn."
  },
  {
    "name": "MicroPython on GitHub",
    "url": "https://github.com/micropython/micropython",
    "description": "Submit bug reports, follow and join in development on GitHub."
  },
  {
    "name": "MicroPython Official Documentation",
    "url": "https://docs.micropython.org/",
    "description": "For various ports, including quick reference, general information, examples and tutorials."
  },
  {
    "name": "MicroPython Wiki",
    "url": "https://wiki.micropython.org/",
    "description": "Community generated documentation and examples of the features of MicroPython and the pyboard."
  },
  {
    "name": "MicroPython Newsletter",
    "url": "https://micropython.org/newsletter",
    "description": "Subscribe to the MicroPython newsletter for news and announcements including new features and new products."
  },
  {
    "name": "MicroPython Store",
    "url": "https://store.micropython.org/",
    "description": "Where you can buy the pyboard, housings, skins, books, connectors and peripherals."
  },
  {
    "name": "MicroPython on Wikipedia",
    "url": "https://en.wikipedia.org/wiki/MicroPython",
    "description": "MicroPython on Wikipedia."
  },
  {
    "name": "awesome-micropythons",
    "url": "https://github.com/adafruit/awesome-micropythons",
    "description": "The many forks & ports of MicroPython."
  },
  {
    "name": "micropy-cli",
    "url": "https://github.com/BradenM/micropy-cli",
    "description": "Micropy Cli is a project management/generation tool for writing MicroPython code in modern IDEs such as VSCode."
  },
  {
    "name": "micropython-stubber",
    "url": "https://github.com/Josverl/micropython-stubber",
    "description": "Generate and use stubs for different MicroPython firmwares to use with vscode and/or pylint."
  },
  {
    "name": "micropy-stubs",
    "url": "https://github.com/BradenM/micropy-stubs",
    "description": "Automatically Generated Stub Packages for Micropy-Cli and whomever else."
  },
  {
    "name": "micropython-extmod-generator",
    "url": "https://github.com/prusnak/micropython-extmod-generator",
    "description": "Generator for MicroPython external modules written in C."
  },
  {
    "name": "esp32-backtrace",
    "url": "https://github.com/tve/esp32-backtrace",
    "description": "ESP32 Exception Stack Backtrace Analyzer."
  },
  {
    "name": "micropython-aiosentry",
    "url": "https://github.com/devbis/micropython-aiosentry",
    "description": "Asynchronous Sentry.io micro client for MicroPython."
  },
  {
    "name": "micropython-usyslog",
    "url": "https://github.com/kfricke/micropython-usyslog",
    "description": "Simple remote syslog client for MicroPython."
  },
  {
    "name": "Asynchronous monitor Use a Raspberry Pico and a logic analyser or scope to monitor asynchronous code.",
    "url": "https://github.com/peterhinch/micropython-monitor"
  },
  {
    "name": "BIPES",
    "url": "https://bipes.net.br/beta2/ui/",
    "description": "Web based IDE for MicroPython with file manager, editor, code generation from blocks, IoT dashboard and Serial/USB/Bluetooth/WebREPL console on the web browser! Source: https://github.com/BIPES."
  },
  {
    "name": "JetBrains IntelliJ/PyCharm MicroPython Plugin",
    "url": "https://plugins.jetbrains.com/plugin/9777-micropython",
    "description": "Plugin for MicroPython devices in IntelliJ and PyCharm."
  },
  {
    "name": "Micropython IDE for VSCode",
    "url": "https://marketplace.visualstudio.com/items?itemName=dphans.micropython-ide-vscode",
    "description": "MicroPython IDE for VSCode README."
  },
  {
    "name": "Micropython-REPLink for VSCode",
    "url": "https://marketplace.visualstudio.com/items?itemName=SWC-Fablab.micropython-replink",
    "description": "Handy shortcuts for interacting with a MicroPython REPL terminal."
  },
  {
    "name": "Mu Editor",
    "url": "https://codewith.mu/",
    "description": " Code with Mu: a simple Python\\MicroPythonb\\CircuitPython editor for beginner programmers."
  },
  {
    "name": "Thonny IDE",
    "url": "https://thonny.org/",
    "description": "Thonny: Python IDE for beginners."
  },
  {
    "name": "Pyboard File Manager",
    "url": "https://github.com/joewez/PyboardFileManager",
    "description": "Pyboard File Manager: Windows GUI for Pyboard.py compatible devices."
  },
  {
    "name": "micropython-ulogger",
    "url": "https://github.com/Li-Lian1069/micropython-ulogger",
    "description": "Lightweight log module customized for MicroPython."
  },
  {
    "name": "upy-shell",
    "url": "https://github.com/dhylands/upy-shell",
    "description": "A simple command line based shell for MicroPython."
  },
  {
    "name": "Micropython-Editor",
    "url": "https://github.com/robert-hh/Micropython-Editor",
    "description": "Small on-board editor for PyBoard, WiPy, ESP8266, ESP32, PyCom and Adafruit devices written in Python."
  },
  {
    "name": "rshell",
    "url": "https://github.com/dhylands/rshell",
    "description": "Copy or Sync files to Boards, enter REPL from your terminal."
  },
  {
    "name": "ampy",
    "url": "https://github.com/scientifichackers/ampy",
    "description": "MicroPython Tool - Utility to interact with a MicroPython board over a serial connection."
  },
  {
    "name": "mpfshell",
    "url": "https://github.com/wendlers/mpfshell",
    "description": "A simple shell based file explorer for ESP8266 and WiPy."
  },
  {
    "name": "mpsync",
    "url": "https://github.com/Uhlo/mpsync",
    "description": "A small tool that synchronizes a folder to a MicroPython board whenever it detects a change."
  },
  {
    "name": "mpremote",
    "url": "https://github.com/micropython/micropython/blob/master/tools/mpremote/README.md",
    "description": "Powerful official shell that supports mounting the host's current directory on the target. Run code without changing the target's filesystem."
  },
  {
    "name": "MicroPython Kickstarter",
    "url": "https://www.kickstarter.com/projects/214379695/micro-python-python-for-microcontrollers",
    "description": "1,931 backers pledged £97,803 to help bring this project to life."
  },
  {
    "name": "MicroPython on the ESP8266 Kickstarter",
    "url": "https://www.kickstarter.com/projects/214379695/micropython-on-the-esp8266-beautifully-easy-iot",
    "description": "1,399 backers pledged £28,534 to help bring this project to life."
  }
]
